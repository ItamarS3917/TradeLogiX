import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Avatar,\n  Chip,\n  LinearProgress,\n  Badge,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Divider,\n  Paper,\n  IconButton,\n  Tab,\n  Tabs,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  CircularProgress,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport {\n  EmojiEvents,\n  Star,\n  Whatshot,\n  Shield,\n  Speed,\n  Timeline,\n  TrendingUp,\n  Psychology,\n  School,\n  WorkspacePremium,\n  Military,\n  LocalFireDepartment,\n  Diamond,\n  AutoAwesome,\n  Celebration,\n  Close,\n  ExpandMore,\n  CheckCircle,\n  RadioButtonUnchecked,\n  Lock,\n  LockOpen,\n  ArrowForward,\n  Info,\n  LeaderboardRounded\n} from '@mui/icons-material';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useSnackbar } from '../../contexts/SnackbarContext';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst AchievementSystem = ({ userStats, onAchievementEarned }) => {\n  const theme = useTheme();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n\n  // State management\n  const [activeTab, setActiveTab] = useState(0);\n  const [selectedAchievement, setSelectedAchievement] = useState(null);\n  const [achievementDialogOpen, setAchievementDialogOpen] = useState(false);\n  const [userAchievements, setUserAchievements] = useState(new Set());\n  const [userProgress, setUserProgress] = useState({});\n  const [recentlyEarned, setRecentlyEarned] = useState([]);\n  const [skillTreeExpanded, setSkillTreeExpanded] = useState(false);\n\n  // Achievement definitions\n  const achievementCategories = {\n    trading: {\n      name: 'Trading Mastery',\n      icon: <TrendingUp />,\n      color: theme.palette.success.main,\n      achievements: [\n        {\n          id: 'first_win',\n          name: 'First Victory',\n          description: 'Complete your first winning trade',\n          icon: <Star />,\n          rarity: 'common',\n          points: 10,\n          requirement: { type: 'win_count', value: 1 }\n        },\n        {\n          id: 'win_streak_5',\n          name: 'Hot Streak',\n          description: 'Achieve a 5-trade winning streak',\n          icon: <Whatshot />,\n          rarity: 'uncommon',\n          points: 25,\n          requirement: { type: 'win_streak', value: 5 }\n        },\n        {\n          id: 'win_streak_10',\n          name: 'Fire Walker',\n          description: 'Achieve a 10-trade winning streak',\n          icon: <LocalFireDepartment />,\n          rarity: 'rare',\n          points: 50,\n          requirement: { type: 'win_streak', value: 10 }\n        },\n        {\n          id: 'hundred_trades',\n          name: 'Century Trader',\n          description: 'Complete 100 trades',\n          icon: <WorkspacePremium />,\n          rarity: 'epic',\n          points: 100,\n          requirement: { type: 'trade_count', value: 100 }\n        },\n        {\n          id: 'perfect_week',\n          name: 'Perfect Week',\n          description: 'Win every trade in a single week',\n          icon: <Diamond />,\n          rarity: 'legendary',\n          points: 200,\n          requirement: { type: 'perfect_week', value: 1 }\n        }\n      ]\n    },\n    risk: {\n      name: 'Risk Management',\n      icon: <Shield />,\n      color: theme.palette.warning.main,\n      achievements: [\n        {\n          id: 'risk_manager',\n          name: 'Risk Manager',\n          description: 'Never risk more than 2% on any trade for 30 days',\n          icon: <Shield />,\n          rarity: 'uncommon',\n          points: 30,\n          requirement: { type: 'risk_discipline', value: 30 }\n        },\n        {\n          id: 'drawdown_master',\n          name: 'Drawdown Master',\n          description: 'Keep maximum drawdown under 5% for 3 months',\n          icon: <Timeline />,\n          rarity: 'rare',\n          points: 75,\n          requirement: { type: 'max_drawdown', value: 5, duration: 90 }\n        },\n        {\n          id: 'stop_loss_hero',\n          name: 'Stop Loss Hero',\n          description: 'Honor stop losses on 50 consecutive trades',\n          icon: <AutoAwesome />,\n          rarity: 'epic',\n          points: 100,\n          requirement: { type: 'stop_loss_discipline', value: 50 }\n        }\n      ]\n    },\n    psychology: {\n      name: 'Mental Game',\n      icon: <Psychology />,\n      color: theme.palette.info.main,\n      achievements: [\n        {\n          id: 'journaler',\n          name: 'Journaler',\n          description: 'Log trades with notes for 30 consecutive days',\n          icon: <School />,\n          rarity: 'common',\n          points: 20,\n          requirement: { type: 'journal_streak', value: 30 }\n        },\n        {\n          id: 'emotion_master',\n          name: 'Emotion Master',\n          description: 'Maintain calm emotional state for 100 trades',\n          icon: <Psychology />,\n          rarity: 'rare',\n          points: 60,\n          requirement: { type: 'emotional_control', value: 100 }\n        },\n        {\n          id: 'plan_follower',\n          name: 'Plan Follower',\n          description: 'Follow trading plan with 95% adherence for 1 month',\n          icon: <CheckCircle />,\n          rarity: 'epic',\n          points: 80,\n          requirement: { type: 'plan_adherence', value: 95, duration: 30 }\n        }\n      ]\n    },\n    performance: {\n      name: 'Performance',\n      icon: <Speed />,\n      color: theme.palette.primary.main,\n      achievements: [\n        {\n          id: 'profitable_month',\n          name: 'Monthly Profit',\n          description: 'Achieve a profitable month',\n          icon: <TrendingUp />,\n          rarity: 'common',\n          points: 25,\n          requirement: { type: 'monthly_profit', value: 1 }\n        },\n        {\n          id: 'rr_master',\n          name: 'R:R Master',\n          description: 'Maintain 2:1 risk-reward ratio for 50 trades',\n          icon: <Speed />,\n          rarity: 'uncommon',\n          points: 40,\n          requirement: { type: 'avg_rr', value: 2.0, count: 50 }\n        },\n        {\n          id: 'consistency_king',\n          name: 'Consistency King',\n          description: 'Achieve 70%+ win rate over 200+ trades',\n          icon: <EmojiEvents />,\n          rarity: 'legendary',\n          points: 250,\n          requirement: { type: 'win_rate', value: 70, min_trades: 200 }\n        }\n      ]\n    }\n  };\n\n  // Skill tree structure\n  const skillTree = {\n    beginner: {\n      level: 1,\n      name: 'Novice Trader',\n      requirements: { points: 0 },\n      skills: ['Basic Trade Entry', 'Stop Loss Basics', 'Position Sizing 101']\n    },\n    intermediate: {\n      level: 2,\n      name: 'Developing Trader',\n      requirements: { points: 100 },\n      skills: ['Risk Management', 'Technical Analysis', 'Trade Psychology']\n    },\n    advanced: {\n      level: 3,\n      name: 'Skilled Trader',\n      requirements: { points: 300 },\n      skills: ['Advanced Setups', 'Market Reading', 'Position Management']\n    },\n    expert: {\n      level: 4,\n      name: 'Expert Trader',\n      requirements: { points: 600 },\n      skills: ['Market Making', 'Advanced Psychology', 'System Development']\n    },\n    master: {\n      level: 5,\n      name: 'Master Trader',\n      requirements: { points: 1000 },\n      skills: ['Strategy Innovation', 'Market Leadership', 'Teaching Others']\n    }\n  };\n\n  // Calculate user's current level and progress\n  const getUserLevel = () => {\n    const totalPoints = Array.from(userAchievements).reduce((sum, achievementId) => {\n      const achievement = findAchievementById(achievementId);\n      return sum + (achievement?.points || 0);\n    }, 0);\n\n    const levels = Object.keys(skillTree);\n    let currentLevel = 'beginner';\n    \n    for (let i = levels.length - 1; i >= 0; i--) {\n      const level = levels[i];\n      if (totalPoints >= skillTree[level].requirements.points) {\n        currentLevel = level;\n        break;\n      }\n    }\n\n    const nextLevelIndex = levels.indexOf(currentLevel) + 1;\n    const nextLevel = nextLevelIndex < levels.length ? levels[nextLevelIndex] : null;\n    const nextLevelPoints = nextLevel ? skillTree[nextLevel].requirements.points : totalPoints;\n    const currentLevelPoints = skillTree[currentLevel].requirements.points;\n    const progressToNext = nextLevel ? ((totalPoints - currentLevelPoints) / (nextLevelPoints - currentLevelPoints)) * 100 : 100;\n\n    return {\n      current: currentLevel,\n      next: nextLevel,\n      totalPoints,\n      progressToNext: Math.min(progressToNext, 100)\n    };\n  };\n\n  const findAchievementById = (id) => {\n    for (const category of Object.values(achievementCategories)) {\n      const achievement = category.achievements.find(a => a.id === id);\n      if (achievement) return achievement;\n    }\n    return null;\n  };\n\n  // Check if user has earned any new achievements\n  useEffect(() => {\n    if (!userStats) return;\n    \n    checkForNewAchievements();\n  }, [userStats]);\n\n  const checkForNewAchievements = () => {\n    const newlyEarned = [];\n    \n    Object.values(achievementCategories).forEach(category => {\n      category.achievements.forEach(achievement => {\n        if (!userAchievements.has(achievement.id) && checkAchievementRequirement(achievement, userStats)) {\n          newlyEarned.push(achievement);\n          setUserAchievements(prev => new Set([...prev, achievement.id]));\n        }\n      });\n    });\n\n    if (newlyEarned.length > 0) {\n      setRecentlyEarned(newlyEarned);\n      newlyEarned.forEach(achievement => {\n        enqueueSnackbar(\n          `üèÜ Achievement Unlocked: ${achievement.name}!`,\n          { \n            variant: 'success',\n            autoHideDuration: 6000,\n            anchorOrigin: { vertical: 'top', horizontal: 'center' }\n          }\n        );\n        onAchievementEarned?.(achievement);\n      });\n    }\n  };\n\n  const checkAchievementRequirement = (achievement, stats) => {\n    const req = achievement.requirement;\n    \n    switch (req.type) {\n      case 'win_count':\n        return (stats.total_wins || 0) >= req.value;\n      case 'win_streak':\n        return (stats.max_win_streak || 0) >= req.value;\n      case 'trade_count':\n        return (stats.total_trades || 0) >= req.value;\n      case 'monthly_profit':\n        return (stats.profitable_months || 0) >= req.value;\n      case 'win_rate':\n        return (stats.total_trades || 0) >= (req.min_trades || 0) && \n               (stats.win_rate || 0) >= req.value;\n      case 'avg_rr':\n        return (stats.total_trades || 0) >= (req.count || 0) &&\n               (stats.avg_risk_reward || 0) >= req.value;\n      default:\n        return false;\n    }\n  };\n\n  const getRarityColor = (rarity) => {\n    switch (rarity) {\n      case 'common': return theme.palette.grey[500];\n      case 'uncommon': return theme.palette.success.main;\n      case 'rare': return theme.palette.info.main;\n      case 'epic': return theme.palette.warning.main;\n      case 'legendary': return theme.palette.error.main;\n      default: return theme.palette.grey[500];\n    }\n  };\n\n  const getRarityLabel = (rarity) => {\n    return rarity.charAt(0).toUpperCase() + rarity.slice(1);\n  };\n\n  const userLevel = getUserLevel();\n\n  const renderAchievementCard = (achievement, categoryColor) => {\n    const isEarned = userAchievements.has(achievement.id);\n    const isRecent = recentlyEarned.some(a => a.id === achievement.id);\n    \n    return (\n      <motion.div\n        key={achievement.id}\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n      >\n        <Card\n          sx={{\n            cursor: 'pointer',\n            transition: 'all 0.3s ease',\n            background: isEarned\n              ? `linear-gradient(135deg, ${alpha(getRarityColor(achievement.rarity), 0.1)}, ${alpha(theme.palette.background.paper, 0.9)})`\n              : alpha(theme.palette.background.paper, 0.6),\n            border: `2px solid ${isEarned ? getRarityColor(achievement.rarity) : alpha(theme.palette.divider, 0.2)}`,\n            filter: isEarned ? 'none' : 'grayscale(60%)',\n            position: 'relative',\n            overflow: 'visible'\n          }}\n          onClick={() => {\n            setSelectedAchievement(achievement);\n            setAchievementDialogOpen(true);\n          }}\n        >\n          {isRecent && (\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              style={{\n                position: 'absolute',\n                top: -8,\n                right: -8,\n                zIndex: 1\n              }}\n            >\n              <Chip\n                icon={<AutoAwesome />}\n                label=\"NEW!\"\n                color=\"error\"\n                size=\"small\"\n                sx={{ fontWeight: 'bold', animation: 'pulse 2s infinite' }}\n              />\n            </motion.div>\n          )}\n          \n          <CardContent sx={{ textAlign: 'center', p: 2 }}>\n            <Box sx={{ mb: 2 }}>\n              <Avatar\n                sx={{\n                  width: 64,\n                  height: 64,\n                  mx: 'auto',\n                  mb: 1,\n                  bgcolor: isEarned ? getRarityColor(achievement.rarity) : theme.palette.action.disabled,\n                  fontSize: '2rem'\n                }}\n              >\n                {isEarned ? achievement.icon : <Lock />}\n              </Avatar>\n              \n              <Chip\n                label={getRarityLabel(achievement.rarity)}\n                size=\"small\"\n                sx={{\n                  bgcolor: alpha(getRarityColor(achievement.rarity), 0.2),\n                  color: getRarityColor(achievement.rarity),\n                  fontWeight: 'bold',\n                  fontSize: '0.7rem'\n                }}\n              />\n            </Box>\n            \n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold', mb: 1 }}>\n              {achievement.name}\n            </Typography>\n            \n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              {achievement.description}\n            </Typography>\n            \n            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 1 }}>\n              <Chip\n                icon={<Star />}\n                label={`${achievement.points} pts`}\n                size=\"small\"\n                color={isEarned ? 'primary' : 'default'}\n              />\n              {isEarned && (\n                <CheckCircle color=\"success\" fontSize=\"small\" />\n              )}\n            </Box>\n          </CardContent>\n        </Card>\n      </motion.div>\n    );\n  };\n\n  const renderSkillTree = () => (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ fontWeight: 'bold', mb: 2 }}>\n          Trading Skill Tree\n        </Typography>\n        \n        <Box sx={{ mb: 3 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n            <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>\n              {skillTree[userLevel.current].name}\n            </Typography>\n            <Chip\n              label={`${userLevel.totalPoints} points`}\n              color=\"primary\"\n              icon={<Star />}\n            />\n          </Box>\n          \n          {userLevel.next && (\n            <>\n              <LinearProgress\n                variant=\"determinate\"\n                value={userLevel.progressToNext}\n                sx={{ height: 8, borderRadius: 4, mb: 1 }}\n              />\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {Math.round(userLevel.progressToNext)}% to {skillTree[userLevel.next].name}\n              </Typography>\n            </>\n          )}\n        </Box>\n        \n        <Stepper orientation=\"vertical\" activeStep={skillTree[userLevel.current].level - 1}>\n          {Object.entries(skillTree).map(([key, level]) => {\n            const isUnlocked = userLevel.totalPoints >= level.requirements.points;\n            const isCurrent = key === userLevel.current;\n            \n            return (\n              <Step key={key} completed={userLevel.totalPoints > level.requirements.points}>\n                <StepLabel\n                  StepIconComponent={() => (\n                    <Avatar\n                      sx={{\n                        width: 32,\n                        height: 32,\n                        bgcolor: isUnlocked ? theme.palette.primary.main : theme.palette.action.disabled,\n                        fontSize: '0.9rem'\n                      }}\n                    >\n                      {isUnlocked ? <LockOpen /> : <Lock />}\n                    </Avatar>\n                  )}\n                >\n                  <Typography\n                    variant=\"subtitle2\"\n                    sx={{\n                      fontWeight: isCurrent ? 'bold' : 'normal',\n                      color: isUnlocked ? 'text.primary' : 'text.disabled'\n                    }}\n                  >\n                    {level.name}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {level.requirements.points} points required\n                  </Typography>\n                </StepLabel>\n                \n                {isUnlocked && (\n                  <StepContent>\n                    <List dense>\n                      {level.skills.map((skill, index) => (\n                        <ListItem key={index}>\n                          <ListItemAvatar>\n                            <CheckCircle color=\"success\" fontSize=\"small\" />\n                          </ListItemAvatar>\n                          <ListItemText primary={skill} />\n                        </ListItem>\n                      ))}\n                    </List>\n                  </StepContent>\n                )}\n              </Step>\n            );\n          })}\n        </Stepper>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <Box>\n      {/* Header with Level Progress */}\n      <Paper sx={{ p: 3, mb: 3, background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.1)}, ${alpha(theme.palette.background.paper, 0.9)})` }}>\n        <Grid container spacing={3} alignItems=\"center\">\n          <Grid item>\n            <Avatar\n              sx={{\n                width: 80,\n                height: 80,\n                bgcolor: theme.palette.primary.main,\n                fontSize: '2rem'\n              }}\n            >\n              <EmojiEvents />\n            </Avatar>\n          </Grid>\n          \n          <Grid item xs>\n            <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mb: 1 }}>\n              {skillTree[userLevel.current].name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              {userAchievements.size} achievements unlocked ‚Ä¢ {userLevel.totalPoints} total points\n            </Typography>\n            \n            {userLevel.next && (\n              <Box>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                  <Typography variant=\"caption\">\n                    Progress to {skillTree[userLevel.next].name}\n                  </Typography>\n                  <Typography variant=\"caption\">\n                    {Math.round(userLevel.progressToNext)}%\n                  </Typography>\n                </Box>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={userLevel.progressToNext}\n                  sx={{ height: 6, borderRadius: 3 }}\n                />\n              </Box>\n            )}\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)} sx={{ mb: 3 }}>\n        <Tab label=\"Achievements\" />\n        <Tab label=\"Skill Tree\" />\n        <Tab label=\"Recent\" />\n      </Tabs>\n\n      {/* Tab Content */}\n      {activeTab === 0 && (\n        <Box>\n          {Object.entries(achievementCategories).map(([categoryKey, category]) => (\n            <Accordion key={categoryKey} defaultExpanded={categoryKey === 'trading'}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                  <Avatar sx={{ bgcolor: category.color, width: 32, height: 32 }}>\n                    {category.icon}\n                  </Avatar>\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n                    {category.name}\n                  </Typography>\n                  <Chip\n                    label={`${category.achievements.filter(a => userAchievements.has(a.id)).length}/${category.achievements.length}`}\n                    size=\"small\"\n                    color=\"primary\"\n                  />\n                </Box>\n              </AccordionSummary>\n              \n              <AccordionDetails>\n                <Grid container spacing={2}>\n                  {category.achievements.map(achievement =>\n                    <Grid item xs={12} sm={6} md={4} key={achievement.id}>\n                      {renderAchievementCard(achievement, category.color)}\n                    </Grid>\n                  )}\n                </Grid>\n              </AccordionDetails>\n            </Accordion>\n          ))}\n        </Box>\n      )}\n\n      {activeTab === 1 && renderSkillTree()}\n\n      {activeTab === 2 && (\n        <Box>\n          {recentlyEarned.length > 0 ? (\n            <Grid container spacing={2}>\n              {recentlyEarned.map(achievement => (\n                <Grid item xs={12} sm={6} md={4} key={achievement.id}>\n                  {renderAchievementCard(achievement, theme.palette.primary.main)}\n                </Grid>\n              ))}\n            </Grid>\n          ) : (\n            <Paper sx={{ p: 4, textAlign: 'center' }}>\n              <Typography variant=\"h6\" color=\"text.secondary\">\n                No recent achievements\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Keep trading to unlock new achievements!\n              </Typography>\n            </Paper>\n          )}\n        </Box>\n      )}\n\n      {/* Achievement Detail Dialog */}\n      <Dialog\n        open={achievementDialogOpen}\n        onClose={() => setAchievementDialogOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        {selectedAchievement && (\n          <>\n            <DialogTitle>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <Avatar\n                  sx={{\n                    bgcolor: getRarityColor(selectedAchievement.rarity),\n                    width: 48,\n                    height: 48\n                  }}\n                >\n                  {selectedAchievement.icon}\n                </Avatar>\n                <Box>\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n                    {selectedAchievement.name}\n                  </Typography>\n                  <Chip\n                    label={getRarityLabel(selectedAchievement.rarity)}\n                    size=\"small\"\n                    sx={{\n                      bgcolor: alpha(getRarityColor(selectedAchievement.rarity), 0.2),\n                      color: getRarityColor(selectedAchievement.rarity)\n                    }}\n                  />\n                </Box>\n                \n                <IconButton\n                  onClick={() => setAchievementDialogOpen(false)}\n                  sx={{ ml: 'auto' }}\n                >\n                  <Close />\n                </IconButton>\n              </Box>\n            </DialogTitle>\n            \n            <DialogContent>\n              <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                {selectedAchievement.description}\n              </Typography>\n              \n              <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n                <Chip\n                  icon={<Star />}\n                  label={`${selectedAchievement.points} Points`}\n                  color=\"primary\"\n                />\n                {userAchievements.has(selectedAchievement.id) ? (\n                  <Chip\n                    icon={<CheckCircle />}\n                    label=\"Unlocked\"\n                    color=\"success\"\n                  />\n                ) : (\n                  <Chip\n                    icon={<Lock />}\n                    label=\"Locked\"\n                    color=\"default\"\n                  />\n                )}\n              </Box>\n              \n              {/* Progress toward achievement */}\n              <Box>\n                <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 'bold' }}>\n                  Progress\n                </Typography>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={userAchievements.has(selectedAchievement.id) ? 100 : 0}\n                  sx={{ height: 8, borderRadius: 4 }}\n                />\n              </Box>\n            </DialogContent>\n            \n            <DialogActions>\n              <Button onClick={() => setAchievementDialogOpen(false)}>\n                Close\n              </Button>\n            </DialogActions>\n          </>\n        )}\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default AchievementSystem;