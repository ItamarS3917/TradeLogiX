import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Grid,\n  Alert,\n  AlertTitle,\n  LinearProgress,\n  CircularProgress,\n  Chip,\n  Button,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Tooltip,\n  Badge,\n  Switch,\n  FormControlLabel,\n  Slider,\n  TextField,\n  MenuItem,\n  Select,\n  FormControl,\n  InputLabel,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport {\n  Shield,\n  Warning,\n  Error,\n  CheckCircle,\n  Info,\n  TrendingDown,\n  TrendingUp,\n  Speed,\n  Assessment,\n  MonetizationOn,\n  Psychology,\n  Timeline,\n  Notifications,\n  Settings,\n  ExpandMore,\n  Refresh,\n  Download,\n  Upload,\n  Calculate,\n  AccountBalance,\n  BarChart,\n  ShowChart,\n  PieChart,\n  DonutLarge,\n  Thermostat,\n  LocalFireDepartment,\n  Security,\n  Emergency,\n  HealthAndSafety\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  PieChart as RechartsPieChart,\n  Cell,\n  Pie,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  ComposedChart,\n  Bar\n} from 'recharts';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { format, subDays } from 'date-fns';\nimport { useSnackbar } from '../../contexts/SnackbarContext';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst RiskManagementDashboard = ({ portfolioData, onRiskAlert }) => {\n  const theme = useTheme();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n\n  // State management\n  const [riskMetrics, setRiskMetrics] = useState(null);\n  const [riskLimits, setRiskLimits] = useState({\n    daily_loss_limit: 2.0, // 2% of account\n    position_size_limit: 5.0, // 5% max per position\n    correlation_limit: 0.7, // Max correlation between positions\n    drawdown_limit: 10.0, // 10% max drawdown\n    var_limit: 1000, // Daily VaR limit\n    leverage_limit: 3.0 // Max leverage ratio\n  });\n  const [alertsEnabled, setAlertsEnabled] = useState(true);\n  const [activeAlerts, setActiveAlerts] = useState([]);\n  const [riskSettingsOpen, setRiskSettingsOpen] = useState(false);\n  const [portfolioHeatMap, setPortfolioHeatMap] = useState([]);\n  const [stressTestResults, setStressTestResults] = useState(null);\n  const [monteCarloResults, setMonteCarloResults] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Risk severity levels\n  const getRiskLevel = (value, thresholds) => {\n    if (value >= thresholds.critical) return { level: 'critical', color: 'error', label: 'Critical' };\n    if (value >= thresholds.high) return { level: 'high', color: 'warning', label: 'High' };\n    if (value >= thresholds.medium) return { level: 'medium', color: 'info', label: 'Medium' };\n    return { level: 'low', color: 'success', label: 'Low' };\n  };\n\n  // Initialize risk data\n  useEffect(() => {\n    generateRiskMetrics();\n    generateStressTestData();\n    generateMonteCarloData();\n    checkRiskAlerts();\n  }, [portfolioData, riskLimits]);\n\n  const generateRiskMetrics = () => {\n    setLoading(true);\n    \n    // Simulate comprehensive risk calculations\n    setTimeout(() => {\n      const metrics = {\n        // Value at Risk\n        var_95: 847.32, // 95% VaR\n        var_99: 1247.89, // 99% VaR\n        expected_shortfall: 1456.23, // Expected Shortfall (CVaR)\n        \n        // Drawdown metrics\n        current_drawdown: 3.24,\n        max_drawdown: 8.76,\n        underwater_periods: 12,\n        recovery_time: 8, // days\n        \n        // Risk ratios\n        sharpe_ratio: 1.67,\n        sortino_ratio: 2.34,\n        calmar_ratio: 1.89,\n        omega_ratio: 1.45,\n        \n        // Portfolio composition\n        total_exposure: 23456.78,\n        net_exposure: 18234.56,\n        gross_exposure: 28901.34,\n        leverage_ratio: 1.23,\n        \n        // Correlation and concentration\n        avg_correlation: 0.34,\n        max_correlation: 0.67,\n        concentration_ratio: 0.42,\n        diversification_ratio: 0.78,\n        \n        // Greeks (for options positions)\n        delta: 0.65,\n        gamma: 0.12,\n        theta: -0.05,\n        vega: 0.23,\n        \n        // Performance metrics\n        beta: 1.15,\n        alpha: 0.03,\n        tracking_error: 0.08,\n        information_ratio: 0.37,\n        \n        // Stress test scenarios\n        stress_1day: -2.34, // 1-day stress loss\n        stress_1week: -5.67, // 1-week stress loss\n        stress_1month: -12.45, // 1-month stress loss\n        \n        // Liquidity metrics\n        liquidity_score: 0.85,\n        avg_bid_ask_spread: 0.02,\n        market_impact: 0.15\n      };\n      \n      setRiskMetrics(metrics);\n      \n      // Generate portfolio heat map\n      const heatMapData = [\n        { asset: 'NQ', exposure: 45.2, risk: 3.4, correlation: 0.23 },\n        { asset: 'ES', exposure: 32.1, risk: 2.8, correlation: 0.78 },\n        { asset: 'YM', exposure: 12.3, risk: 1.9, correlation: 0.65 },\n        { asset: 'RTY', exposure: 8.7, risk: 4.1, correlation: 0.34 },\n        { asset: 'EURUSD', exposure: 1.7, risk: 1.2, correlation: -0.12 }\n      ];\n      \n      setPortfolioHeatMap(heatMapData);\n      setLoading(false);\n    }, 1500);\n  };\n\n  const generateStressTestData = () => {\n    // Simulate stress test scenarios\n    const scenarios = {\n      market_crash: {\n        name: '2008-style Market Crash',\n        scenario: '-40% equity decline',\n        portfolio_impact: -15.67,\n        probability: 0.02\n      },\n      volatility_spike: {\n        name: 'VIX Spike to 80',\n        scenario: 'Extreme volatility event',\n        portfolio_impact: -8.45,\n        probability: 0.05\n      },\n      interest_rate_shock: {\n        name: 'Fed Rate Hike 200bps',\n        scenario: 'Sudden monetary tightening',\n        portfolio_impact: -6.23,\n        probability: 0.10\n      },\n      liquidity_crisis: {\n        name: 'Liquidity Dry-up',\n        scenario: 'Credit market freeze',\n        portfolio_impact: -12.34,\n        probability: 0.03\n      },\n      currency_crisis: {\n        name: 'USD Devaluation',\n        scenario: '20% USD decline',\n        portfolio_impact: 3.45,\n        probability: 0.08\n      }\n    };\n    \n    setStressTestResults(scenarios);\n  };\n\n  const generateMonteCarloData = () => {\n    // Simulate Monte Carlo simulation results\n    const simulations = {\n      total_runs: 10000,\n      confidence_intervals: {\n        '95%': { lower: -892.34, upper: 1245.67 },\n        '99%': { lower: -1345.78, upper: 1567.89 }\n      },\n      probability_of_loss: 0.42,\n      expected_return: 156.78,\n      worst_case: -2345.67,\n      best_case: 3456.78,\n      distribution: Array.from({ length: 20 }, (_, i) => ({\n        range: `${i * 200 - 2000} to ${(i + 1) * 200 - 2000}`,\n        frequency: Math.max(0, Math.round(Math.random() * 500 * Math.exp(-Math.pow((i - 10), 2) / 50)))\n      }))\n    };\n    \n    setMonteCarloResults(simulations);\n  };\n\n  const checkRiskAlerts = () => {\n    if (!riskMetrics) return;\n    \n    const alerts = [];\n    \n    // Check daily loss limit\n    if (riskMetrics.current_drawdown > riskLimits.daily_loss_limit) {\n      alerts.push({\n        id: 'daily_loss',\n        type: 'critical',\n        title: 'Daily Loss Limit Exceeded',\n        message: `Current drawdown (${riskMetrics.current_drawdown.toFixed(2)}%) exceeds limit (${riskLimits.daily_loss_limit}%)`,\n        timestamp: new Date(),\n        action: 'Consider reducing positions'\n      });\n    }\n    \n    // Check VaR limit\n    if (riskMetrics.var_95 > riskLimits.var_limit) {\n      alerts.push({\n        id: 'var_exceeded',\n        type: 'warning',\n        title: 'VaR Limit Approached',\n        message: `95% VaR ($${riskMetrics.var_95.toFixed(2)}) approaching limit ($${riskLimits.var_limit})`,\n        timestamp: new Date(),\n        action: 'Review position sizing'\n      });\n    }\n    \n    // Check correlation limit\n    if (riskMetrics.max_correlation > riskLimits.correlation_limit) {\n      alerts.push({\n        id: 'correlation_high',\n        type: 'warning',\n        title: 'High Correlation Detected',\n        message: `Maximum correlation (${(riskMetrics.max_correlation * 100).toFixed(0)}%) exceeds limit (${(riskLimits.correlation_limit * 100).toFixed(0)}%)`,\n        timestamp: new Date(),\n        action: 'Diversify positions'\n      });\n    }\n    \n    setActiveAlerts(alerts);\n    \n    // Send notifications for critical alerts\n    if (alertsEnabled && alerts.length > 0) {\n      alerts.forEach(alert => {\n        if (alert.type === 'critical') {\n          enqueueSnackbar(alert.title, { variant: 'error', persist: true });\n          onRiskAlert?.(alert);\n        }\n      });\n    }\n  };\n\n  const handleRiskLimitChange = (limit, value) => {\n    setRiskLimits(prev => ({ ...prev, [limit]: value }));\n  };\n\n  const exportRiskReport = () => {\n    enqueueSnackbar('Risk report exported successfully!', { variant: 'success' });\n  };\n\n  const renderRiskOverviewCards = () => {\n    if (!riskMetrics) return null;\n    \n    const overviewMetrics = [\n      {\n        title: 'Current Drawdown',\n        value: `${riskMetrics.current_drawdown.toFixed(2)}%`,\n        limit: riskLimits.daily_loss_limit,\n        threshold: { critical: 8, high: 5, medium: 3 },\n        icon: <TrendingDown />,\n        color: 'error'\n      },\n      {\n        title: '95% VaR',\n        value: `$${riskMetrics.var_95.toFixed(0)}`,\n        limit: riskLimits.var_limit,\n        threshold: { critical: 1200, high: 1000, medium: 800 },\n        icon: <Assessment />,\n        color: 'warning'\n      },\n      {\n        title: 'Sharpe Ratio',\n        value: riskMetrics.sharpe_ratio.toFixed(2),\n        threshold: { critical: 0.5, high: 1.0, medium: 1.5 },\n        icon: <Speed />,\n        color: 'info',\n        inverse: true\n      },\n      {\n        title: 'Leverage',\n        value: `${riskMetrics.leverage_ratio.toFixed(2)}x`,\n        limit: riskLimits.leverage_limit,\n        threshold: { critical: 4, high: 3, medium: 2 },\n        icon: <AccountBalance />,\n        color: 'primary'\n      }\n    ];\n    \n    return (\n      <Grid container spacing={3}>\n        {overviewMetrics.map((metric, index) => {\n          const riskLevel = getRiskLevel(\n            parseFloat(metric.value.replace(/[^0-9.-]/g, '')),\n            metric.threshold\n          );\n          \n          const isOverLimit = metric.limit && parseFloat(metric.value.replace(/[^0-9.-]/g, '')) > metric.limit;\n          const displayRiskLevel = isOverLimit ? { level: 'critical', color: 'error', label: 'Over Limit' } : riskLevel;\n          \n          return (\n            <Grid item xs={12} sm={6} md={3} key={index}>\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card\n                  sx={{\n                    background: `linear-gradient(135deg, ${alpha(theme.palette[displayRiskLevel.color].main, 0.1)}, ${alpha(theme.palette.background.paper, 0.9)})`,\n                    border: `2px solid ${alpha(theme.palette[displayRiskLevel.color].main, 0.3)}`,\n                    position: 'relative'\n                  }}\n                >\n                  {isOverLimit && (\n                    <Chip\n                      label=\"OVER LIMIT\"\n                      color=\"error\"\n                      size=\"small\"\n                      sx={{\n                        position: 'absolute',\n                        top: 8,\n                        right: 8,\n                        fontWeight: 'bold',\n                        zIndex: 1\n                      }}\n                    />\n                  )}\n                  \n                  <CardContent sx={{ textAlign: 'center' }}>\n                    <Box\n                      sx={{\n                        width: 56,\n                        height: 56,\n                        borderRadius: '50%',\n                        bgcolor: theme.palette[displayRiskLevel.color].main,\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        color: 'white',\n                        mx: 'auto',\n                        mb: 2\n                      }}\n                    >\n                      {metric.icon}\n                    </Box>\n                    \n                    <Typography variant=\"h4\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                      {metric.value}\n                    </Typography>\n                    \n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                      {metric.title}\n                    </Typography>\n                    \n                    <Chip\n                      label={displayRiskLevel.label}\n                      color={displayRiskLevel.color}\n                      size=\"small\"\n                      sx={{ fontWeight: 'bold' }}\n                    />\n                    \n                    {metric.limit && (\n                      <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\n                        Limit: {typeof metric.limit === 'number' ? \n                          (metric.title.includes('$') ? `$${metric.limit}` : \n                           metric.title.includes('%') ? `${metric.limit}%` : \n                           metric.title.includes('x') ? `${metric.limit}x` : metric.limit) : \n                          metric.limit}\n                      </Typography>\n                    )}\n                  </CardContent>\n                </Card>\n              </motion.div>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  };\n\n  const renderActiveAlerts = () => {\n    if (activeAlerts.length === 0) {\n      return (\n        <Alert severity=\"success\" sx={{ mb: 3 }}>\n          <AlertTitle>All Risk Metrics Within Limits</AlertTitle>\n          No active risk alerts. Your portfolio is operating within defined risk parameters.\n        </Alert>\n      );\n    }\n    \n    return (\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" sx={{ fontWeight: 'bold', mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Warning color=\"error\" />\n          Active Risk Alerts ({activeAlerts.length})\n        </Typography>\n        \n        {activeAlerts.map((alert, index) => (\n          <motion.div\n            key={alert.id}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <Alert\n              severity={alert.type === 'critical' ? 'error' : 'warning'}\n              sx={{ mb: 2 }}\n              action={\n                <Button color=\"inherit\" size=\"small\">\n                  {alert.action}\n                </Button>\n              }\n            >\n              <AlertTitle>{alert.title}</AlertTitle>\n              {alert.message}\n              <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\n                {format(alert.timestamp, 'MMM dd, yyyy HH:mm')}\n              </Typography>\n            </Alert>\n          </motion.div>\n        ))}\n      </Box>\n    );\n  };\n\n  const renderPortfolioHeatMap = () => (\n    <Card>\n      <CardHeader\n        title=\"Portfolio Risk Heatmap\"\n        avatar={<Thermostat color=\"primary\" />}\n      />\n      <CardContent>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Asset</TableCell>\n                <TableCell align=\"right\">Exposure (%)</TableCell>\n                <TableCell align=\"right\">Risk Score</TableCell>\n                <TableCell align=\"right\">Correlation</TableCell>\n                <TableCell align=\"right\">Risk Level</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {portfolioHeatMap.map((asset, index) => {\n                const riskLevel = getRiskLevel(asset.risk, { critical: 4, high: 3, medium: 2 });\n                \n                return (\n                  <TableRow key={asset.asset}>\n                    <TableCell>\n                      <Typography sx={{ fontWeight: 'bold' }}>\n                        {asset.asset}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', gap: 1 }}>\n                        <Box sx={{ width: 60 }}>\n                          <LinearProgress\n                            variant=\"determinate\"\n                            value={asset.exposure}\n                            sx={{ height: 6, borderRadius: 3 }}\n                          />\n                        </Box>\n                        <Typography>{asset.exposure.toFixed(1)}%</Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Typography sx={{ fontWeight: 'bold' }}>\n                        {asset.risk.toFixed(1)}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Chip\n                        label={asset.correlation.toFixed(2)}\n                        color={Math.abs(asset.correlation) > 0.7 ? 'error' : Math.abs(asset.correlation) > 0.5 ? 'warning' : 'success'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Chip\n                        label={riskLevel.label}\n                        color={riskLevel.color}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </CardContent>\n    </Card>\n  );\n\n  const renderStressTests = () => (\n    <Card>\n      <CardHeader\n        title=\"Stress Test Results\"\n        avatar={<Emergency color=\"primary\" />}\n      />\n      <CardContent>\n        <Grid container spacing={2}>\n          {Object.entries(stressTestResults || {}).map(([key, scenario]) => (\n            <Grid item xs={12} md={6} key={key}>\n              <Paper sx={{ p: 2, background: alpha(theme.palette.error.main, 0.05) }}>\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                  {scenario.name}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  {scenario.scenario}\n                </Typography>\n                \n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <Box>\n                    <Typography\n                      variant=\"h6\"\n                      sx={{\n                        fontWeight: 'bold',\n                        color: scenario.portfolio_impact < 0 ? theme.palette.error.main : theme.palette.success.main\n                      }}\n                    >\n                      {scenario.portfolio_impact > 0 ? '+' : ''}{scenario.portfolio_impact.toFixed(2)}%\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Portfolio Impact\n                    </Typography>\n                  </Box>\n                  \n                  <Chip\n                    label={`${(scenario.probability * 100).toFixed(1)}% chance`}\n                    color={scenario.probability > 0.05 ? 'error' : 'warning'}\n                    size=\"small\"\n                  />\n                </Box>\n              </Paper>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n\n  const renderMonteCarloResults = () => {\n    if (!monteCarloResults) return null;\n    \n    return (\n      <Card>\n        <CardHeader\n          title=\"Monte Carlo Simulation\"\n          subheader={`${monteCarloResults.total_runs.toLocaleString()} simulations`}\n          avatar={<BarChart color=\"primary\" />}\n        />\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 2 }}>\n                Key Statistics\n              </Typography>\n              \n              <List dense>\n                <ListItem>\n                  <ListItemIcon><TrendingUp color=\"success\" /></ListItemIcon>\n                  <ListItemText\n                    primary=\"Expected Return\"\n                    secondary={`$${monteCarloResults.expected_return.toFixed(2)}`}\n                  />\n                </ListItem>\n                \n                <ListItem>\n                  <ListItemIcon><TrendingDown color=\"error\" /></ListItemIcon>\n                  <ListItemText\n                    primary=\"Probability of Loss\"\n                    secondary={`${(monteCarloResults.probability_of_loss * 100).toFixed(1)}%`}\n                  />\n                </ListItem>\n                \n                <ListItem>\n                  <ListItemIcon><Error color=\"error\" /></ListItemIcon>\n                  <ListItemText\n                    primary=\"Worst Case\"\n                    secondary={`$${monteCarloResults.worst_case.toFixed(2)}`}\n                  />\n                </ListItem>\n                \n                <ListItem>\n                  <ListItemIcon><CheckCircle color=\"success\" /></ListItemIcon>\n                  <ListItemText\n                    primary=\"Best Case\"\n                    secondary={`$${monteCarloResults.best_case.toFixed(2)}`}\n                  />\n                </ListItem>\n              </List>\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 2 }}>\n                Return Distribution\n              </Typography>\n              \n              <ResponsiveContainer width=\"100%\" height={200}>\n                <AreaChart data={monteCarloResults.distribution}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"range\" hide />\n                  <YAxis />\n                  <RechartsTooltip />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"frequency\"\n                    stroke={theme.palette.primary.main}\n                    fill={alpha(theme.palette.primary.main, 0.3)}\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent sx={{ textAlign: 'center', py: 6 }}>\n          <CircularProgress size={60} sx={{ mb: 2 }} />\n          <Typography variant=\"h6\">Calculating Risk Metrics...</Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Analyzing portfolio risk and generating comprehensive metrics\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Paper sx={{ p: 3, mb: 3, background: `linear-gradient(135deg, ${alpha(theme.palette.error.main, 0.1)}, ${alpha(theme.palette.background.paper, 0.9)})` }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Box>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold', mb: 0.5 }}>\n              Risk Management Dashboard\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Professional risk monitoring and portfolio protection\n            </Typography>\n          </Box>\n          \n          <Box sx={{ display: 'flex', gap: 2 }}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={alertsEnabled}\n                  onChange={(e) => setAlertsEnabled(e.target.checked)}\n                />\n              }\n              label=\"Risk Alerts\"\n            />\n            \n            <Button\n              variant=\"outlined\"\n              startIcon={<Settings />}\n              onClick={() => setRiskSettingsOpen(true)}\n            >\n              Settings\n            </Button>\n            \n            <Button\n              variant=\"contained\"\n              startIcon={<Download />}\n              onClick={exportRiskReport}\n            >\n              Export Report\n            </Button>\n          </Box>\n        </Box>\n      </Paper>\n\n      {/* Active Alerts */}\n      {renderActiveAlerts()}\n\n      {/* Risk Overview Cards */}\n      {renderRiskOverviewCards()}\n\n      {/* Detailed Analysis */}\n      <Grid container spacing={3} sx={{ mt: 3 }}>\n        <Grid item xs={12} lg={8}>\n          {renderPortfolioHeatMap()}\n        </Grid>\n        \n        <Grid item xs={12} lg={4}>\n          <Card>\n            <CardHeader\n              title=\"Risk Composition\"\n              avatar={<PieChart color=\"primary\" />}\n            />\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <RechartsPieChart>\n                  <Pie\n                    data={portfolioHeatMap}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    fill={theme.palette.primary.main}\n                    dataKey=\"exposure\"\n                    label={({ asset, exposure }) => `${asset}: ${exposure.toFixed(1)}%`}\n                  >\n                    {portfolioHeatMap.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />\n                    ))}\n                  </Pie>\n                  <RechartsTooltip />\n                </RechartsPieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Stress Tests and Monte Carlo */}\n      <Grid container spacing={3} sx={{ mt: 3 }}>\n        <Grid item xs={12} md={6}>\n          {renderStressTests()}\n        </Grid>\n        \n        <Grid item xs={12} md={6}>\n          {renderMonteCarloResults()}\n        </Grid>\n      </Grid>\n\n      {/* Risk Settings Dialog */}\n      <Dialog\n        open={riskSettingsOpen}\n        onClose={() => setRiskSettingsOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Risk Management Settings</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={3} sx={{ mt: 1 }}>\n            {Object.entries(riskLimits).map(([key, value]) => (\n              <Grid item xs={12} sm={6} key={key}>\n                <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                  {key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                </Typography>\n                <Slider\n                  value={value}\n                  onChange={(e, newValue) => handleRiskLimitChange(key, newValue)}\n                  min={key.includes('limit') ? 0 : 0.1}\n                  max={key.includes('correlation') ? 1 : key.includes('leverage') ? 10 : 20}\n                  step={key.includes('correlation') ? 0.05 : 0.1}\n                  marks\n                  valueLabelDisplay=\"on\"\n                  valueLabelFormat={(val) => \n                    key.includes('correlation') ? val.toFixed(2) :\n                    key.includes('var') ? `$${val}` :\n                    key.includes('leverage') ? `${val}x` : `${val}%`\n                  }\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setRiskSettingsOpen(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={() => setRiskSettingsOpen(false)}>\n            Save Settings\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default RiskManagementDashboard;