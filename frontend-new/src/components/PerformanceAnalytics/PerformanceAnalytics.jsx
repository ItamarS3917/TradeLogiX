import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Grid,\n  Tabs,\n  Tab,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Chip,\n  LinearProgress,\n  CircularProgress,\n  Button,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Tooltip,\n  Alert,\n  AlertTitle,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Assessment,\n  Timeline,\n  Speed,\n  Shield,\n  Psychology,\n  MonetizationOn,\n  EmojiEvents,\n  Warning,\n  CheckCircle,\n  Info,\n  ExpandMore,\n  Download,\n  Share,\n  Refresh,\n  ZoomIn,\n  Analytics,\n  BarChart,\n  PieChart,\n  ShowChart,\n  CalendarToday,\n  Schedule,\n  Compare,\n  Insights,\n  Star,\n  TrendingFlat,\n  LocalFireDepartment,\n  WaterDrop,\n  Bolt,\n  AccountBalance\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ComposedChart,\n  Bar,\n  PieChart as RechartsPieChart,\n  Cell,\n  Pie,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  ScatterChart,\n  Scatter,\n  ReferenceLine\n} from 'recharts';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { format, subDays, startOfMonth, endOfMonth, startOfWeek, endOfWeek } from 'date-fns';\nimport { useSnackbar } from '../../contexts/SnackbarContext';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst PerformanceAnalytics = ({ tradeData = [], timeRange = '1M' }) => {\n  const theme = useTheme();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n\n  // State management\n  const [activeTab, setActiveTab] = useState(0);\n  const [selectedTimeframe, setSelectedTimeframe] = useState(timeRange);\n  const [performanceMetrics, setPerformanceMetrics] = useState(null);\n  const [detailedAnalysis, setDetailedAnalysis] = useState(null);\n  const [comparisonData, setComparisonData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [benchmarkEnabled, setBenchmarkEnabled] = useState(true);\n  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);\n  const [selectedMetric, setSelectedMetric] = useState(null);\n  const [advancedMetricsVisible, setAdvancedMetricsVisible] = useState(false);\n\n  // Tab configuration\n  const tabs = [\n    { label: 'Overview', icon: <Assessment />, description: 'Key performance metrics' },\n    { label: 'Returns Analysis', icon: <TrendingUp />, description: 'Profit/loss breakdown' },\n    { label: 'Risk Metrics', icon: <Shield />, description: 'Risk-adjusted performance' },\n    { label: 'Trading Patterns', icon: <Timeline />, description: 'Behavioral analysis' },\n    { label: 'Benchmarking', icon: <Compare />, description: 'Market comparison' }\n  ];\n\n  // Timeframe options\n  const timeframes = [\n    { value: '1W', label: '1 Week' },\n    { value: '1M', label: '1 Month' },\n    { value: '3M', label: '3 Months' },\n    { value: '6M', label: '6 Months' },\n    { value: '1Y', label: '1 Year' },\n    { value: 'YTD', label: 'Year to Date' },\n    { value: 'ALL', label: 'All Time' }\n  ];\n\n  // Generate comprehensive performance data\n  useEffect(() => {\n    generatePerformanceMetrics();\n  }, [tradeData, selectedTimeframe]);\n\n  const generatePerformanceMetrics = () => {\n    setLoading(true);\n    \n    // Simulate comprehensive analytics calculation\n    setTimeout(() => {\n      const metrics = {\n        // Basic Performance\n        totalTrades: 156,\n        winningTrades: 109,\n        losingTrades: 47,\n        winRate: 69.87,\n        totalReturn: 18.45,\n        totalReturnDollar: 9225.50,\n        \n        // Risk Metrics\n        sharpeRatio: 1.67,\n        sortinoRatio: 2.34,\n        calmarRatio: 1.89,\n        maximumDrawdown: 8.76,\n        currentDrawdown: 2.34,\n        volatility: 12.45,\n        \n        // Trading Efficiency\n        averageWin: 127.89,\n        averageLoss: -89.45,\n        largestWin: 485.67,\n        largestLoss: -234.56,\n        profitFactor: 1.89,\n        expectancy: 59.23,\n        \n        // Risk-Reward\n        averageRR: 1.67,\n        bestRR: 4.23,\n        worstRR: 0.34,\n        \n        // Streak Analysis\n        currentStreak: 7,\n        longestWinStreak: 12,\n        longestLossStreak: 4,\n        \n        // Time Analysis\n        averageHoldTime: '2h 34m',\n        shortestTrade: '12m',\n        longestTrade: '1d 4h',\n        \n        // Monthly Performance\n        monthlyReturns: Array.from({ length: 12 }, (_, i) => ({\n          month: format(new Date(2024, i, 1), 'MMM'),\n          return: (Math.random() - 0.3) * 15,\n          trades: Math.floor(Math.random() * 30) + 10,\n          winRate: 50 + Math.random() * 40\n        })),\n        \n        // Daily Performance\n        dailyReturns: Array.from({ length: 90 }, (_, i) => {\n          const date = subDays(new Date(), 89 - i);\n          return {\n            date: format(date, 'MMM dd'),\n            return: (Math.random() - 0.4) * 3,\n            cumulativeReturn: 5 + i * 0.2 + (Math.random() - 0.5) * 2,\n            volume: Math.floor(Math.random() * 10) + 1,\n            benchmark: 3 + i * 0.1 + (Math.random() - 0.5) * 1\n          };\n        }),\n        \n        // Setup Performance\n        setupAnalysis: [\n          { setup: 'FVG Fill', trades: 34, winRate: 76.47, avgReturn: 1.23, profitFactor: 2.1 },\n          { setup: 'BPR', trades: 28, winRate: 64.29, avgReturn: 0.89, profitFactor: 1.7 },\n          { setup: 'OTE', trades: 22, winRate: 72.73, avgReturn: 1.45, profitFactor: 2.3 },\n          { setup: 'Order Block', trades: 19, winRate: 57.89, avgReturn: 0.67, profitFactor: 1.4 },\n          { setup: 'Liquidity Grab', trades: 15, winRate: 80.00, avgReturn: 1.67, profitFactor: 2.8 },\n          { setup: 'Other', trades: 38, winRate: 65.79, avgReturn: 0.95, profitFactor: 1.6 }\n        ],\n        \n        // Time of Day Analysis\n        timeAnalysis: [\n          { timeSlot: '9:30-10:30', trades: 23, winRate: 78.26, avgReturn: 1.45 },\n          { timeSlot: '10:30-11:30', trades: 19, winRate: 63.16, avgReturn: 0.87 },\n          { timeSlot: '11:30-12:30', trades: 12, winRate: 58.33, avgReturn: 0.23 },\n          { timeSlot: '12:30-13:30', trades: 8, winRate: 50.00, avgReturn: -0.12 },\n          { timeSlot: '13:30-14:30', trades: 21, winRate: 71.43, avgReturn: 1.23 },\n          { timeSlot: '14:30-15:30', trades: 18, winRate: 66.67, avgReturn: 0.95 },\n          { timeSlot: '15:30-16:00', trades: 15, winRate: 73.33, avgReturn: 1.34 }\n        ],\n        \n        // Psychology Metrics\n        emotionalAnalysis: {\n          disciplineScore: 78,\n          consistencyScore: 82,\n          patienceScore: 71,\n          riskManagementScore: 85,\n          planAdherenceScore: 76\n        },\n        \n        // Advanced Metrics\n        advancedMetrics: {\n          kellyOptimal: 0.18,\n          currentKelly: 0.15,\n          informationRatio: 0.34,\n          treynorRatio: 0.89,\n          jensenAlpha: 0.023,\n          beta: 1.15,\n          correlationToMarket: 0.67,\n          downDeviationRatio: 0.78,\n          sterlingRatio: 1.23,\n          burkeRatio: 0.89\n        }\n      };\n      \n      setPerformanceMetrics(metrics);\n      setLoading(false);\n    }, 1500);\n  };\n\n  const getPerformanceColor = (value, isPercentage = true) => {\n    const threshold = isPercentage ? 0 : 0;\n    return value > threshold ? theme.palette.success.main : theme.palette.error.main;\n  };\n\n  const getMetricInterpretation = (metric, value) => {\n    const interpretations = {\n      sharpeRatio: {\n        excellent: 2.0,\n        good: 1.0,\n        fair: 0.5,\n        poor: 0\n      },\n      winRate: {\n        excellent: 70,\n        good: 60,\n        fair: 50,\n        poor: 40\n      },\n      profitFactor: {\n        excellent: 2.0,\n        good: 1.5,\n        fair: 1.2,\n        poor: 1.0\n      }\n    };\n    \n    const thresholds = interpretations[metric];\n    if (!thresholds) return 'good';\n    \n    if (value >= thresholds.excellent) return 'excellent';\n    if (value >= thresholds.good) return 'good';\n    if (value >= thresholds.fair) return 'fair';\n    return 'poor';\n  };\n\n  const getInterpretationColor = (interpretation) => {\n    switch (interpretation) {\n      case 'excellent': return theme.palette.success.main;\n      case 'good': return theme.palette.info.main;\n      case 'fair': return theme.palette.warning.main;\n      case 'poor': return theme.palette.error.main;\n      default: return theme.palette.grey[500];\n    }\n  };\n\n  const renderOverviewTab = () => {\n    if (!performanceMetrics) return null;\n    \n    const keyMetrics = [\n      {\n        title: 'Total Return',\n        value: `${performanceMetrics.totalReturn.toFixed(2)}%`,\n        subtitle: `$${performanceMetrics.totalReturnDollar.toFixed(2)}`,\n        icon: <MonetizationOn />,\n        color: getPerformanceColor(performanceMetrics.totalReturn)\n      },\n      {\n        title: 'Win Rate',\n        value: `${performanceMetrics.winRate.toFixed(1)}%`,\n        subtitle: `${performanceMetrics.winningTrades}/${performanceMetrics.totalTrades}`,\n        icon: <EmojiEvents />,\n        color: getInterpretationColor(getMetricInterpretation('winRate', performanceMetrics.winRate))\n      },\n      {\n        title: 'Sharpe Ratio',\n        value: performanceMetrics.sharpeRatio.toFixed(2),\n        subtitle: 'Risk-adjusted return',\n        icon: <Speed />,\n        color: getInterpretationColor(getMetricInterpretation('sharpeRatio', performanceMetrics.sharpeRatio))\n      },\n      {\n        title: 'Max Drawdown',\n        value: `${performanceMetrics.maximumDrawdown.toFixed(2)}%`,\n        subtitle: `Current: ${performanceMetrics.currentDrawdown.toFixed(2)}%`,\n        icon: <TrendingDown />,\n        color: performanceMetrics.maximumDrawdown < 10 ? theme.palette.success.main : theme.palette.warning.main\n      },\n      {\n        title: 'Profit Factor',\n        value: performanceMetrics.profitFactor.toFixed(2),\n        subtitle: 'Gross profit / Gross loss',\n        icon: <AccountBalance />,\n        color: getInterpretationColor(getMetricInterpretation('profitFactor', performanceMetrics.profitFactor))\n      },\n      {\n        title: 'Average R:R',\n        value: `1:${performanceMetrics.averageRR.toFixed(2)}`,\n        subtitle: `Best: 1:${performanceMetrics.bestRR.toFixed(2)}`,\n        icon: <Timeline />,\n        color: performanceMetrics.averageRR > 1.5 ? theme.palette.success.main : theme.palette.warning.main\n      }\n    ];\n    \n    return (\n      <Box>\n        {/* Key Metrics Cards */}\n        <Grid container spacing={3} sx={{ mb: 4 }}>\n          {keyMetrics.map((metric, index) => (\n            <Grid item xs={12} sm={6} md={4} key={index}>\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card\n                  sx={{\n                    background: `linear-gradient(135deg, ${alpha(metric.color, 0.1)}, ${alpha(theme.palette.background.paper, 0.9)})`,\n                    border: `1px solid ${alpha(metric.color, 0.3)}`,\n                    cursor: 'pointer',\n                    '&:hover': {\n                      transform: 'translateY(-2px)',\n                      boxShadow: theme.shadows[4]\n                    },\n                    transition: 'all 0.3s ease'\n                  }}\n                  onClick={() => {\n                    setSelectedMetric(metric);\n                    setDetailsDialogOpen(true);\n                  }}\n                >\n                  <CardContent sx={{ textAlign: 'center' }}>\n                    <Box\n                      sx={{\n                        width: 56,\n                        height: 56,\n                        borderRadius: '50%',\n                        bgcolor: metric.color,\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        color: 'white',\n                        mx: 'auto',\n                        mb: 2\n                      }}\n                    >\n                      {metric.icon}\n                    </Box>\n                    \n                    <Typography variant=\"h4\" sx={{ fontWeight: 'bold', mb: 0.5 }}>\n                      {metric.value}\n                    </Typography>\n                    \n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                      {metric.title}\n                    </Typography>\n                    \n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {metric.subtitle}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            </Grid>\n          ))}\n        </Grid>\n        \n        {/* Performance Chart */}\n        <Card sx={{ mb: 3 }}>\n          <CardHeader\n            title=\"Cumulative Returns\"\n            action={\n              <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                <InputLabel>Timeframe</InputLabel>\n                <Select\n                  value={selectedTimeframe}\n                  label=\"Timeframe\"\n                  onChange={(e) => setSelectedTimeframe(e.target.value)}\n                >\n                  {timeframes.map(tf => (\n                    <MenuItem key={tf.value} value={tf.value}>\n                      {tf.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            }\n          />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <ComposedChart data={performanceMetrics.dailyReturns}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <RechartsTooltip\n                  formatter={(value, name) => [\n                    `${parseFloat(value).toFixed(2)}%`,\n                    name === 'cumulativeReturn' ? 'Portfolio' : 'Benchmark'\n                  ]}\n                />\n                <Legend />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"cumulativeReturn\"\n                  stroke={theme.palette.primary.main}\n                  fill={alpha(theme.palette.primary.main, 0.3)}\n                  name=\"Portfolio Return\"\n                />\n                {benchmarkEnabled && (\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"benchmark\"\n                    stroke={theme.palette.secondary.main}\n                    strokeWidth={2}\n                    dot={false}\n                    name=\"Benchmark\"\n                  />\n                )}\n              </ComposedChart>\n            </ResponsiveContainer>\n            \n            <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={benchmarkEnabled}\n                    onChange={(e) => setBenchmarkEnabled(e.target.checked)}\n                  />\n                }\n                label=\"Show Benchmark\"\n              />\n              \n              <Button\n                size=\"small\"\n                startIcon={<Download />}\n                onClick={() => enqueueSnackbar('Performance report downloaded!', { variant: 'success' })}\n              >\n                Export Chart\n              </Button>\n            </Box>\n          </CardContent>\n        </Card>\n        \n        {/* Quick Stats */}\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardHeader title=\"Recent Performance\" avatar={<TrendingUp color=\"primary\" />} />\n              <CardContent>\n                <List dense>\n                  <ListItem>\n                    <ListItemIcon><CalendarToday color=\"primary\" /></ListItemIcon>\n                    <ListItemText\n                      primary=\"This Week\"\n                      secondary={`+${(Math.random() * 5).toFixed(2)}% (${Math.floor(Math.random() * 10) + 5} trades)`}\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon><LocalFireDepartment color=\"warning\" /></ListItemIcon>\n                    <ListItemText\n                      primary=\"Current Streak\"\n                      secondary={`${performanceMetrics.currentStreak} consecutive wins`}\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon><Star color=\"success\" /></ListItemIcon>\n                    <ListItemText\n                      primary=\"Best Setup\"\n                      secondary=\"Liquidity Grab (80% win rate)\"\n                    />\n                  </ListItem>\n                </List>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardHeader title=\"Areas for Improvement\" avatar={<Insights color=\"primary\" />} />\n              <CardContent>\n                <List dense>\n                  <ListItem>\n                    <ListItemIcon><Warning color=\"warning\" /></ListItemIcon>\n                    <ListItemText\n                      primary=\"Lunch Hour Trading\"\n                      secondary=\"Lower win rate during 12:30-13:30\"\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon><Psychology color=\"info\" /></ListItemIcon>\n                    <ListItemText\n                      primary=\"Plan Adherence\"\n                      secondary=\"76% - Room for improvement\"\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon><Speed color=\"error\" /></ListItemIcon>\n                    <ListItemText\n                      primary=\"Hold Time Optimization\"\n                      secondary=\"Consider shorter holds on certain setups\"\n                    />\n                  </ListItem>\n                </List>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  const renderReturnsAnalysis = () => {\n    if (!performanceMetrics) return null;\n    \n    return (\n      <Box>\n        {/* Monthly Returns Heatmap */}\n        <Card sx={{ mb: 3 }}>\n          <CardHeader title=\"Monthly Returns\" avatar={<CalendarToday color=\"primary\" />} />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <ComposedChart data={performanceMetrics.monthlyReturns}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"month\" />\n                <YAxis yAxisId=\"return\" />\n                <YAxis yAxisId=\"trades\" orientation=\"right\" />\n                <RechartsTooltip\n                  formatter={(value, name) => {\n                    if (name === 'return') return [`${value.toFixed(2)}%`, 'Return'];\n                    if (name === 'trades') return [value, 'Trades'];\n                    return [value, name];\n                  }}\n                />\n                <Legend />\n                <Bar\n                  yAxisId=\"return\"\n                  dataKey=\"return\"\n                  fill={theme.palette.primary.main}\n                  name=\"Monthly Return (%)\"\n                />\n                <Line\n                  yAxisId=\"trades\"\n                  type=\"monotone\"\n                  dataKey=\"trades\"\n                  stroke={theme.palette.secondary.main}\n                  strokeWidth={2}\n                  name=\"Number of Trades\"\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n        \n        {/* Win/Loss Distribution */}\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardHeader title=\"Win/Loss Distribution\" avatar={<PieChart color=\"primary\" />} />\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <RechartsPieChart>\n                    <Pie\n                      data={[\n                        { name: 'Winning Trades', value: performanceMetrics.winningTrades, fill: theme.palette.success.main },\n                        { name: 'Losing Trades', value: performanceMetrics.losingTrades, fill: theme.palette.error.main }\n                      ]}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                      dataKey=\"value\"\n                      label={({ name, value, percent }) => `${name}: ${value} (${(percent * 100).toFixed(0)}%)`}\n                    />\n                    <RechartsTooltip />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardHeader title=\"Return Statistics\" avatar={<BarChart color=\"primary\" />} />\n              <CardContent>\n                <TableContainer>\n                  <Table size=\"small\">\n                    <TableBody>\n                      <TableRow>\n                        <TableCell>Average Win</TableCell>\n                        <TableCell align=\"right\">\n                          <Typography sx={{ color: theme.palette.success.main, fontWeight: 'bold' }}>\n                            ${performanceMetrics.averageWin.toFixed(2)}\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>Average Loss</TableCell>\n                        <TableCell align=\"right\">\n                          <Typography sx={{ color: theme.palette.error.main, fontWeight: 'bold' }}>\n                            ${performanceMetrics.averageLoss.toFixed(2)}\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>Largest Win</TableCell>\n                        <TableCell align=\"right\">\n                          <Typography sx={{ color: theme.palette.success.main, fontWeight: 'bold' }}>\n                            ${performanceMetrics.largestWin.toFixed(2)}\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>Largest Loss</TableCell>\n                        <TableCell align=\"right\">\n                          <Typography sx={{ color: theme.palette.error.main, fontWeight: 'bold' }}>\n                            ${performanceMetrics.largestLoss.toFixed(2)}\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>Expectancy</TableCell>\n                        <TableCell align=\"right\">\n                          <Typography sx={{ fontWeight: 'bold' }}>\n                            ${performanceMetrics.expectancy.toFixed(2)}\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  const renderRiskMetrics = () => {\n    if (!performanceMetrics) return null;\n    \n    const riskMetrics = [\n      { name: 'Sharpe Ratio', value: performanceMetrics.sharpeRatio },\n      { name: 'Sortino Ratio', value: performanceMetrics.sortinoRatio },\n      { name: 'Calmar Ratio', value: performanceMetrics.calmarRatio },\n      { name: 'Max Drawdown', value: performanceMetrics.maximumDrawdown },\n      { name: 'Volatility', value: performanceMetrics.volatility }\n    ];\n    \n    return (\n      <Box>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={8}>\n            <Card>\n              <CardHeader title=\"Risk-Adjusted Returns\" avatar={<Shield color=\"primary\" />} />\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <RadarChart data={riskMetrics}>\n                    <PolarGrid />\n                    <PolarAngleAxis dataKey=\"name\" />\n                    <PolarRadiusAxis angle={90} domain={[0, 3]} />\n                    <Radar\n                      name=\"Risk Metrics\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.primary.main}\n                      fill={alpha(theme.palette.primary.main, 0.3)}\n                      strokeWidth={2}\n                    />\n                    <RechartsTooltip />\n                  </RadarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} md={4}>\n            <Card sx={{ height: '100%' }}>\n              <CardHeader title=\"Risk Assessment\" avatar={<Assessment color=\"primary\" />} />\n              <CardContent>\n                <List dense>\n                  {riskMetrics.map((metric, index) => {\n                    const interpretation = getMetricInterpretation(metric.name.toLowerCase().replace(' ', ''), metric.value);\n                    return (\n                      <ListItem key={index}>\n                        <ListItemText\n                          primary={metric.name}\n                          secondary={metric.value.toFixed(2)}\n                        />\n                        <Chip\n                          label={interpretation}\n                          color={interpretation === 'excellent' ? 'success' : interpretation === 'good' ? 'info' : interpretation === 'fair' ? 'warning' : 'error'}\n                          size=\"small\"\n                        />\n                      </ListItem>\n                    );\n                  })}\n                </List>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n        \n        {/* Advanced Risk Metrics */}\n        <Card sx={{ mt: 3 }}>\n          <CardHeader\n            title=\"Advanced Risk Metrics\"\n            action={\n              <Button\n                size=\"small\"\n                onClick={() => setAdvancedMetricsVisible(!advancedMetricsVisible)}\n                endIcon={<ExpandMore sx={{ transform: advancedMetricsVisible ? 'rotate(180deg)' : 'none' }} />}\n              >\n                {advancedMetricsVisible ? 'Hide' : 'Show'} Advanced\n              </Button>\n            }\n          />\n          \n          <Accordion expanded={advancedMetricsVisible}>\n            <AccordionDetails>\n              <Grid container spacing={2}>\n                {Object.entries(performanceMetrics.advancedMetrics).map(([key, value]) => (\n                  <Grid item xs={6} sm={4} md={3} key={key}>\n                    <Paper sx={{ p: 2, textAlign: 'center' }}>\n                      <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n                        {value.toFixed(3)}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                      </Typography>\n                    </Paper>\n                  </Grid>\n                ))}\n              </Grid>\n            </AccordionDetails>\n          </Accordion>\n        </Card>\n      </Box>\n    );\n  };\n\n  const renderTradingPatterns = () => {\n    if (!performanceMetrics) return null;\n    \n    return (\n      <Box>\n        {/* Setup Analysis */}\n        <Card sx={{ mb: 3 }}>\n          <CardHeader title=\"Performance by Setup\" avatar={<Analytics color=\"primary\" />} />\n          <CardContent>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Setup Type</TableCell>\n                    <TableCell align=\"right\">Trades</TableCell>\n                    <TableCell align=\"right\">Win Rate</TableCell>\n                    <TableCell align=\"right\">Avg Return</TableCell>\n                    <TableCell align=\"right\">Profit Factor</TableCell>\n                    <TableCell align=\"right\">Rating</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {performanceMetrics.setupAnalysis.map((setup, index) => (\n                    <TableRow key={index}>\n                      <TableCell sx={{ fontWeight: 'bold' }}>{setup.setup}</TableCell>\n                      <TableCell align=\"right\">{setup.trades}</TableCell>\n                      <TableCell align=\"right\">\n                        <Chip\n                          label={`${setup.winRate.toFixed(1)}%`}\n                          color={setup.winRate > 70 ? 'success' : setup.winRate > 60 ? 'info' : 'warning'}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Typography\n                          sx={{\n                            color: getPerformanceColor(setup.avgReturn),\n                            fontWeight: 'bold'\n                          }}\n                        >\n                          {setup.avgReturn > 0 ? '+' : ''}{setup.avgReturn.toFixed(2)}%\n                        </Typography>\n                      </TableCell>\n                      <TableCell align=\"right\">{setup.profitFactor.toFixed(2)}</TableCell>\n                      <TableCell align=\"right\">\n                        {Array.from({ length: 5 }, (_, i) => (\n                          <Star\n                            key={i}\n                            sx={{\n                              fontSize: 16,\n                              color: i < Math.round(setup.profitFactor) ? theme.palette.warning.main : theme.palette.grey[300]\n                            }}\n                          />\n                        ))}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </CardContent>\n        </Card>\n        \n        {/* Time Analysis */}\n        <Card>\n          <CardHeader title=\"Performance by Time of Day\" avatar={<Schedule color=\"primary\" />} />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <ComposedChart data={performanceMetrics.timeAnalysis}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"timeSlot\" />\n                <YAxis yAxisId=\"winRate\" />\n                <YAxis yAxisId=\"trades\" orientation=\"right\" />\n                <RechartsTooltip\n                  formatter={(value, name) => {\n                    if (name === 'winRate') return [`${value.toFixed(1)}%`, 'Win Rate'];\n                    if (name === 'trades') return [value, 'Trades'];\n                    return [value, name];\n                  }}\n                />\n                <Legend />\n                <Bar\n                  yAxisId=\"trades\"\n                  dataKey=\"trades\"\n                  fill={alpha(theme.palette.secondary.main, 0.6)}\n                  name=\"Number of Trades\"\n                />\n                <Line\n                  yAxisId=\"winRate\"\n                  type=\"monotone\"\n                  dataKey=\"winRate\"\n                  stroke={theme.palette.primary.main}\n                  strokeWidth={3}\n                  name=\"Win Rate (%)\"\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </Box>\n    );\n  };\n\n  const renderBenchmarking = () => {\n    if (!performanceMetrics) return null;\n    \n    return (\n      <Box>\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          <AlertTitle>Benchmark Comparison</AlertTitle>\n          Your performance is compared against relevant market indices and professional trading benchmarks.\n        </Alert>\n        \n        <Grid container spacing={3}>\n          <Grid item xs={12} md={8}>\n            <Card>\n              <CardHeader title=\"Portfolio vs Benchmark\" avatar={<Compare color=\"primary\" />} />\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <ComposedChart data={performanceMetrics.dailyReturns}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <RechartsTooltip\n                      formatter={(value, name) => [\n                        `${parseFloat(value).toFixed(2)}%`,\n                        name === 'cumulativeReturn' ? 'Your Portfolio' : 'S&P 500'\n                      ]}\n                    />\n                    <Legend />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"cumulativeReturn\"\n                      stroke={theme.palette.primary.main}\n                      strokeWidth={3}\n                      name=\"Your Portfolio\"\n                    />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"benchmark\"\n                      stroke={theme.palette.secondary.main}\n                      strokeWidth={2}\n                      strokeDasharray=\"5 5\"\n                      name=\"S&P 500\"\n                    />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} md={4}>\n            <Card>\n              <CardHeader title=\"Relative Performance\" avatar={<TrendingUp color=\"primary\" />} />\n              <CardContent>\n                <List dense>\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Alpha\"\n                      secondary=\"Excess return vs benchmark\"\n                    />\n                    <Typography sx={{ fontWeight: 'bold', color: theme.palette.success.main }}>\n                      +{performanceMetrics.advancedMetrics.jensenAlpha.toFixed(2)}%\n                    </Typography>\n                  </ListItem>\n                  \n                  <ListItem>\n                    <ListItemText\n                      primary=\"Beta\"\n                      secondary=\"Market correlation\"\n                    />\n                    <Typography sx={{ fontWeight: 'bold' }}>\n                      {performanceMetrics.advancedMetrics.beta.toFixed(2)}\n                    </Typography>\n                  </ListItem>\n                  \n                  <ListItem>\n                    <ListItemText\n                      primary=\"Information Ratio\"\n                      secondary=\"Risk-adjusted alpha\"\n                    />\n                    <Typography sx={{ fontWeight: 'bold' }}>\n                      {performanceMetrics.advancedMetrics.informationRatio.toFixed(2)}\n                    </Typography>\n                  </ListItem>\n                  \n                  <ListItem>\n                    <ListItemText\n                      primary=\"Tracking Error\"\n                      secondary=\"Volatility of excess returns\"\n                    />\n                    <Typography sx={{ fontWeight: 'bold' }}>\n                      {(Math.random() * 0.1).toFixed(2)}%\n                    </Typography>\n                  </ListItem>\n                </List>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent sx={{ textAlign: 'center', py: 6 }}>\n          <CircularProgress size={60} sx={{ mb: 2 }} />\n          <Typography variant=\"h6\">Analyzing Performance...</Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Calculating comprehensive analytics and insights\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Paper sx={{ p: 3, mb: 3, background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.1)}, ${alpha(theme.palette.background.paper, 0.9)})` }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Box>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold', mb: 0.5 }}>\n              Performance Analytics\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Comprehensive analysis of your trading performance and patterns\n            </Typography>\n          </Box>\n          \n          <Box sx={{ display: 'flex', gap: 2 }}>\n            <Button\n              variant=\"outlined\"\n              startIcon={<Refresh />}\n              onClick={generatePerformanceMetrics}\n            >\n              Refresh\n            </Button>\n            \n            <Button\n              variant=\"contained\"\n              startIcon={<Download />}\n              onClick={() => enqueueSnackbar('Performance report exported!', { variant: 'success' })}\n            >\n              Export Report\n            </Button>\n          </Box>\n        </Box>\n      </Paper>\n\n      {/* Navigation Tabs */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs\n          value={activeTab}\n          onChange={(e, newValue) => setActiveTab(newValue)}\n          variant=\"fullWidth\"\n          sx={{\n            '& .MuiTab-root': {\n              minHeight: 72,\n              flexDirection: 'column',\n              gap: 0.5\n            }\n          }}\n        >\n          {tabs.map((tab, index) => (\n            <Tab\n              key={index}\n              icon={tab.icon}\n              label={\n                <Box sx={{ textAlign: 'center' }}>\n                  <Typography variant=\"body2\" sx={{ fontWeight: 'medium' }}>\n                    {tab.label}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {tab.description}\n                  </Typography>\n                </Box>\n              }\n            />\n          ))}\n        </Tabs>\n      </Paper>\n\n      {/* Tab Content */}\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={activeTab}\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          exit={{ opacity: 0, x: -20 }}\n          transition={{ duration: 0.3 }}\n        >\n          {activeTab === 0 && renderOverviewTab()}\n          {activeTab === 1 && renderReturnsAnalysis()}\n          {activeTab === 2 && renderRiskMetrics()}\n          {activeTab === 3 && renderTradingPatterns()}\n          {activeTab === 4 && renderBenchmarking()}\n        </motion.div>\n      </AnimatePresence>\n\n      {/* Metric Details Dialog */}\n      <Dialog\n        open={detailsDialogOpen}\n        onClose={() => setDetailsDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        {selectedMetric && (\n          <>\n            <DialogTitle>{selectedMetric.title} - Detailed Analysis</DialogTitle>\n            <DialogContent>\n              <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                Detailed analysis and interpretation of {selectedMetric.title.toLowerCase()} would be displayed here,\n                including historical trends, peer comparisons, and actionable insights.\n              </Typography>\n              \n              <Alert severity=\"info\">\n                <AlertTitle>Interpretation</AlertTitle>\n                Based on your current {selectedMetric.title.toLowerCase()} of {selectedMetric.value}, \n                your performance is considered {getMetricInterpretation('sharpeRatio', parseFloat(selectedMetric.value.replace(/[^0-9.-]/g, '')))}.\n              </Alert>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={() => setDetailsDialogOpen(false)}>Close</Button>\n            </DialogActions>\n          </>\n        )}\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default PerformanceAnalytics;