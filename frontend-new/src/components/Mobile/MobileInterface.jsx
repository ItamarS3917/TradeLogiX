import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  IconButton,\n  Fab,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Slide,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  SwipeableDrawer,\n  Avatar,\n  Chip,\n  Badge,\n  Paper,\n  Grid,\n  LinearProgress,\n  Divider,\n  Tooltip,\n  SpeedDial,\n  SpeedDialAction,\n  SpeedDialIcon,\n  useTheme,\n  alpha,\n  Snackbar,\n  Alert\n} from '@mui/material';\nimport {\n  Mic,\n  Close,\n  Add,\n  TrendingUp,\n  TrendingDown,\n  MonetizationOn,\n  Assessment,\n  Notifications,\n  Settings,\n  Menu,\n  SwipeUp,\n  SwipeDown,\n  SwipeLeft,\n  SwipeRight,\n  TouchApp,\n  VoiceChat,\n  Speed,\n  Psychology,\n  EmojiEvents,\n  Share,\n  Bookmark,\n  Analytics,\n  CameraAlt,\n  FilterList,\n  Search,\n  Refresh,\n  MoreVert\n} from '@mui/icons-material';\nimport { motion, AnimatePresence, useSwipeable } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnackbar } from '../../contexts/SnackbarContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport VoiceTradeEntry from '../VoiceTradeEntry/VoiceTradeEntry';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst MobileInterface = () => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n\n  // State management\n  const [quickActionsOpen, setQuickActionsOpen] = useState(false);\n  const [voiceDialogOpen, setVoiceDialogOpen] = useState(false);\n  const [gesturesDrawerOpen, setGesturesDrawerOpen] = useState(false);\n  const [currentGesture, setCurrentGesture] = useState(null);\n  const [dailyStats, setDailyStats] = useState(null);\n  const [isListening, setIsListening] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [speedDialOpen, setSpeedDialOpen] = useState(false);\n\n  // Sample daily stats\n  useEffect(() => {\n    setDailyStats({\n      trades_today: 5,\n      pnl_today: '+$342.50',\n      win_rate_today: 80,\n      streak: 3,\n      next_plan: 'London Open - NQ long setup'\n    });\n\n    setNotifications([\n      { id: 1, title: 'Market Open Alert', message: 'US markets opening in 30 minutes', priority: 'high' },\n      { id: 2, title: 'Trade Setup', message: 'FVG setup detected on NQ 5m', priority: 'medium' },\n      { id: 3, title: 'Risk Warning', message: 'Daily loss limit at 75%', priority: 'high' }\n    ]);\n  }, []);\n\n  // Gesture handlers\n  const swipeHandlers = useSwipeable({\n    onSwipedUp: () => {\n      setCurrentGesture('up');\n      handleGestureAction('quick_stats');\n    },\n    onSwipedDown: () => {\n      setCurrentGesture('down');\n      handleGestureAction('quick_actions');\n    },\n    onSwipedLeft: () => {\n      setCurrentGesture('left');\n      handleGestureAction('prev_page');\n    },\n    onSwipedRight: () => {\n      setCurrentGesture('right');\n      handleGestureAction('next_page');\n    },\n    onTap: ({ event }) => {\n      if (event.detail === 2) { // Double tap\n        handleGestureAction('voice_entry');\n      }\n    }\n  });\n\n  const handleGestureAction = (action) => {\n    switch (action) {\n      case 'quick_stats':\n        enqueueSnackbar('📊 Quick stats opened', { variant: 'info' });\n        break;\n      case 'quick_actions':\n        setQuickActionsOpen(true);\n        break;\n      case 'voice_entry':\n        setVoiceDialogOpen(true);\n        break;\n      case 'prev_page':\n        navigate(-1);\n        break;\n      case 'next_page':\n        // Could navigate to next logical page\n        break;\n      default:\n        break;\n    }\n    \n    // Clear gesture indicator\n    setTimeout(() => setCurrentGesture(null), 500);\n  };\n\n  const handleVoiceTradeData = (tradeData) => {\n    // Process voice trade data\n    enqueueSnackbar('🎤 Voice trade data processed!', { variant: 'success' });\n    setVoiceDialogOpen(false);\n    // Navigate to trade form with pre-filled data\n    navigate('/trades', { state: { voiceData: tradeData } });\n  };\n\n  const speedDialActions = [\n    {\n      icon: <Mic />,\n      name: 'Voice Entry',\n      action: () => setVoiceDialogOpen(true)\n    },\n    {\n      icon: <Add />,\n      name: 'Quick Trade',\n      action: () => navigate('/trades')\n    },\n    {\n      icon: <Assessment />,\n      name: 'Analytics',\n      action: () => navigate('/analytics')\n    },\n    {\n      icon: <Psychology />,\n      name: 'TradeSage',\n      action: () => navigate('/tradesage')\n    },\n    {\n      icon: <EmojiEvents />,\n      name: 'Leaderboards',\n      action: () => navigate('/leaderboards')\n    }\n  ];\n\n  const renderDailyStatsCard = () => (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Card\n        sx={{\n          background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.1)}, ${alpha(theme.palette.background.paper, 0.9)})`,\n          border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,\n          backdropFilter: 'blur(10px)'\n        }}\n      >\n        <CardContent>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n              Today's Performance\n            </Typography>\n            <Chip\n              label={`${dailyStats?.trades_today} trades`}\n              color=\"primary\"\n              size=\"small\"\n            />\n          </Box>\n          \n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <Box sx={{ textAlign: 'center' }}>\n                <Typography \n                  variant=\"h4\" \n                  sx={{ \n                    fontWeight: 'bold',\n                    color: dailyStats?.pnl_today?.startsWith('+') ? theme.palette.success.main : theme.palette.error.main\n                  }}\n                >\n                  {dailyStats?.pnl_today}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Daily P&L\n                </Typography>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={6}>\n              <Box sx={{ textAlign: 'center' }}>\n                <Typography variant=\"h4\" color=\"primary\" sx={{ fontWeight: 'bold' }}>\n                  {dailyStats?.win_rate_today}%\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Win Rate\n                </Typography>\n              </Box>\n            </Grid>\n          </Grid>\n          \n          <Box sx={{ mt: 2 }}>\n            <LinearProgress\n              variant=\"determinate\"\n              value={dailyStats?.win_rate_today}\n              sx={{ height: 6, borderRadius: 3 }}\n            />\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>\n              <Typography variant=\"caption\">\n                🔥 {dailyStats?.streak} win streak\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Next: {dailyStats?.next_plan}\n              </Typography>\n            </Box>\n          </Box>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n\n  const renderNotificationsCard = () => (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3, delay: 0.1 }}\n    >\n      <Card sx={{ mt: 2 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n              Notifications\n            </Typography>\n            <Badge badgeContent={notifications.filter(n => n.priority === 'high').length} color=\"error\">\n              <Notifications />\n            </Badge>\n          </Box>\n          \n          <List dense>\n            {notifications.slice(0, 3).map((notification) => (\n              <ListItem key={notification.id} sx={{ px: 0 }}>\n                <ListItemIcon>\n                  {notification.priority === 'high' ? (\n                    <TrendingDown color=\"error\" />\n                  ) : (\n                    <TrendingUp color=\"success\" />\n                  )}\n                </ListItemIcon>\n                <ListItemText\n                  primary={notification.title}\n                  secondary={notification.message}\n                  primaryTypographyProps={{ fontSize: '0.9rem', fontWeight: 600 }}\n                  secondaryTypographyProps={{ fontSize: '0.8rem' }}\n                />\n              </ListItem>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n\n  const renderGestureIndicator = () => {\n    if (!currentGesture) return null;\n\n    const gestureIcons = {\n      up: <SwipeUp />,\n      down: <SwipeDown />,\n      left: <SwipeLeft />,\n      right: <SwipeRight />\n    };\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.5 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.5 }}\n        style={{\n          position: 'fixed',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          zIndex: 9999,\n          backgroundColor: alpha(theme.palette.background.paper, 0.9),\n          borderRadius: '50%',\n          width: 80,\n          height: 80,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          boxShadow: theme.shadows[8]\n        }}\n      >\n        {gestureIcons[currentGesture]}\n      </motion.div>\n    );\n  };\n\n  return (\n    <Box\n      {...swipeHandlers}\n      sx={{\n        minHeight: '100vh',\n        position: 'relative',\n        overflow: 'hidden',\n        touchAction: 'pan-y pinch-zoom'\n      }}\n    >\n      {/* Gesture Indicator */}\n      <AnimatePresence>\n        {renderGestureIndicator()}\n      </AnimatePresence>\n\n      {/* Main Content */}\n      <Box sx={{ p: 2, pb: 10 }}>\n        {/* Header */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Box>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold', mb: 0.5 }}>\n              Good {new Date().getHours() < 12 ? 'Morning' : new Date().getHours() < 18 ? 'Afternoon' : 'Evening'}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Ready to trade? Use voice commands or gestures to get started.\n            </Typography>\n          </Box>\n          \n          <Avatar\n            sx={{\n              width: 48,\n              height: 48,\n              bgcolor: theme.palette.primary.main,\n              cursor: 'pointer'\n            }}\n            onClick={() => navigate('/settings')}\n          >\n            {user?.name?.charAt(0).toUpperCase() || 'U'}\n          </Avatar>\n        </Box>\n\n        {/* Daily Stats */}\n        {renderDailyStatsCard()}\n\n        {/* Notifications */}\n        {renderNotificationsCard()}\n\n        {/* Quick Actions Hint */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.2 }}\n        >\n          <Card sx={{ mt: 2, background: alpha(theme.palette.info.main, 0.05) }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <TouchApp color=\"info\" />\n                <Box>\n                  <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold' }}>\n                    Gesture Controls Active\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Swipe up for stats • Swipe down for actions • Double tap for voice\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </Box>\n\n      {/* Speed Dial - Floating Actions */}\n      <SpeedDial\n        ariaLabel=\"Quick Actions\"\n        sx={{ position: 'fixed', bottom: 80, right: 16 }}\n        icon={<SpeedDialIcon />}\n        open={speedDialOpen}\n        onClose={() => setSpeedDialOpen(false)}\n        onOpen={() => setSpeedDialOpen(true)}\n      >\n        {speedDialActions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={() => {\n              action.action();\n              setSpeedDialOpen(false);\n            }}\n          />\n        ))}\n      </SpeedDial>\n\n      {/* Voice Entry FAB */}\n      <Fab\n        color=\"secondary\"\n        aria-label=\"voice entry\"\n        sx={{\n          position: 'fixed',\n          bottom: 16,\n          right: 16,\n          background: `linear-gradient(135deg, ${theme.palette.secondary.main}, ${theme.palette.secondary.dark})`,\n          '&:hover': {\n            background: `linear-gradient(135deg, ${theme.palette.secondary.dark}, ${theme.palette.secondary.main})`\n          }\n        }}\n        onClick={() => setVoiceDialogOpen(true)}\n      >\n        <motion.div\n          animate={isListening ? { scale: [1, 1.2, 1] } : { scale: 1 }}\n          transition={{ repeat: isListening ? Infinity : 0, duration: 1 }}\n        >\n          <VoiceChat />\n        </motion.div>\n      </Fab>\n\n      {/* Voice Entry Dialog */}\n      <Dialog\n        open={voiceDialogOpen}\n        onClose={() => setVoiceDialogOpen(false)}\n        fullScreen\n        TransitionComponent={Transition}\n      >\n        <DialogTitle>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n              🎤 Voice Trade Entry\n            </Typography>\n            <IconButton\n              edge=\"end\"\n              color=\"inherit\"\n              onClick={() => setVoiceDialogOpen(false)}\n            >\n              <Close />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n        \n        <DialogContent sx={{ p: 2 }}>\n          <VoiceTradeEntry\n            onTradeDataParsed={handleVoiceTradeData}\n            onClose={() => setVoiceDialogOpen(false)}\n          />\n          \n          {/* Voice Commands Help */}\n          <Card sx={{ mt: 3, background: alpha(theme.palette.info.main, 0.05) }}>\n            <CardContent>\n              <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 2 }}>\n                🗣️ Voice Command Examples:\n              </Typography>\n              \n              <List dense>\n                <ListItem>\n                  <ListItemText\n                    primary=\"'Long NQ, 2 contracts, entry 15450, stop 15430, target 15480'\"\n                    primaryTypographyProps={{ fontSize: '0.9rem', fontStyle: 'italic' }}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText\n                    primary=\"'Short ES, 1 contract, entry 4385, stop loss 4395, take profit 4375'\"\n                    primaryTypographyProps={{ fontSize: '0.9rem', fontStyle: 'italic' }}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText\n                    primary=\"'Buy 3 contracts YM, entry 34250, stop 34280, target 34220'\"\n                    primaryTypographyProps={{ fontSize: '0.9rem', fontStyle: 'italic' }}\n                  />\n                </ListItem>\n              </List>\n            </CardContent>\n          </Card>\n        </DialogContent>\n      </Dialog>\n\n      {/* Quick Actions Drawer */}\n      <SwipeableDrawer\n        anchor=\"bottom\"\n        open={quickActionsOpen}\n        onClose={() => setQuickActionsOpen(false)}\n        onOpen={() => setQuickActionsOpen(true)}\n        sx={{\n          '& .MuiDrawer-paper': {\n            borderTopLeftRadius: 16,\n            borderTopRightRadius: 16,\n            maxHeight: '50vh'\n          }\n        }}\n      >\n        <Box sx={{ p: 2 }}>\n          <Box sx={{ width: 40, height: 4, bgcolor: 'divider', borderRadius: 2, mx: 'auto', mb: 2 }} />\n          \n          <Typography variant=\"h6\" sx={{ fontWeight: 'bold', mb: 2, textAlign: 'center' }}>\n            Quick Actions\n          </Typography>\n          \n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                startIcon={<Add />}\n                onClick={() => {\n                  navigate('/trades');\n                  setQuickActionsOpen(false);\n                }}\n                sx={{ py: 1.5 }}\n              >\n                Add Trade\n              </Button>\n            </Grid>\n            \n            <Grid item xs={6}>\n              <Button\n                fullWidth\n                variant=\"outlined\"\n                startIcon={<Mic />}\n                onClick={() => {\n                  setVoiceDialogOpen(true);\n                  setQuickActionsOpen(false);\n                }}\n                sx={{ py: 1.5 }}\n              >\n                Voice Entry\n              </Button>\n            </Grid>\n            \n            <Grid item xs={6}>\n              <Button\n                fullWidth\n                variant=\"outlined\"\n                startIcon={<Assessment />}\n                onClick={() => {\n                  navigate('/analytics');\n                  setQuickActionsOpen(false);\n                }}\n                sx={{ py: 1.5 }}\n              >\n                Analytics\n              </Button>\n            </Grid>\n            \n            <Grid item xs={6}>\n              <Button\n                fullWidth\n                variant=\"outlined\"\n                startIcon={<Psychology />}\n                onClick={() => {\n                  navigate('/tradesage');\n                  setQuickActionsOpen(false);\n                }}\n                sx={{ py: 1.5 }}\n              >\n                TradeSage\n              </Button>\n            </Grid>\n          </Grid>\n        </Box>\n      </SwipeableDrawer>\n\n      {/* Gesture Guide */}\n      <Drawer\n        anchor=\"left\"\n        open={gesturesDrawerOpen}\n        onClose={() => setGesturesDrawerOpen(false)}\n      >\n        <Box sx={{ width: 280, p: 2 }}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 'bold', mb: 2 }}>\n            Gesture Controls\n          </Typography>\n          \n          <List>\n            <ListItem>\n              <ListItemIcon><SwipeUp /></ListItemIcon>\n              <ListItemText primary=\"Swipe Up\" secondary=\"Quick stats & performance\" />\n            </ListItem>\n            \n            <ListItem>\n              <ListItemIcon><SwipeDown /></ListItemIcon>\n              <ListItemText primary=\"Swipe Down\" secondary=\"Quick actions menu\" />\n            </ListItem>\n            \n            <ListItem>\n              <ListItemIcon><SwipeLeft /></ListItemIcon>\n              <ListItemText primary=\"Swipe Left\" secondary=\"Previous page\" />\n            </ListItem>\n            \n            <ListItem>\n              <ListItemIcon><SwipeRight /></ListItemIcon>\n              <ListItemText primary=\"Swipe Right\" secondary=\"Next page\" />\n            </ListItem>\n            \n            <ListItem>\n              <ListItemIcon><TouchApp /></ListItemIcon>\n              <ListItemText primary=\"Double Tap\" secondary=\"Voice trade entry\" />\n            </ListItem>\n          </List>\n        </Box>\n      </Drawer>\n    </Box>\n  );\n};\n\nexport default MobileInterface;