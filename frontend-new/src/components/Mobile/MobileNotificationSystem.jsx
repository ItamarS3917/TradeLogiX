import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  Avatar,\n  IconButton,\n  Button,\n  Chip,\n  Divider,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Switch,\n  FormControlLabel,\n  FormGroup,\n  Slider,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Paper,\n  Grid,\n  Alert,\n  AlertTitle,\n  Badge,\n  Tooltip,\n  Snackbar,\n  Slide,\n  Fade,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport {\n  Notifications,\n  NotificationsActive,\n  NotificationsOff,\n  TrendingUp,\n  TrendingDown,\n  Warning,\n  Info,\n  CheckCircle,\n  Error,\n  MonetizationOn,\n  Assessment,\n  Psychology,\n  Schedule,\n  Settings,\n  Close,\n  Delete,\n  MarkAsUnread,\n  MarkEmailRead,\n  VolumeUp,\n  VolumeOff,\n  Vibration,\n  Smartphone,\n  Watch,\n  Computer,\n  FilterList,\n  Sort,\n  Refresh,\n  CloudSync,\n  Security,\n  Emergency,\n  LocalFireDepartment,\n  Timeline,\n  Analytics,\n  Speed\n} from '@mui/icons-material';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { formatDistanceToNow, format } from 'date-fns';\nimport { useSnackbar } from '../../contexts/SnackbarContext';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst MobileNotificationSystem = ({ onNotificationAction }) => {\n  const theme = useTheme();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n\n  // State management\n  const [notifications, setNotifications] = useState([]);\n  const [notificationSettings, setNotificationSettings] = useState({\n    enabled: true,\n    sound: true,\n    vibration: true,\n    pushNotifications: true,\n    emailNotifications: false,\n    smsNotifications: false,\n    // Trading alerts\n    priceAlerts: true,\n    profitTargets: true,\n    stopLossHits: true,\n    drawdownAlerts: true,\n    marketOpen: true,\n    marketClose: false,\n    economicEvents: true,\n    // Risk management\n    riskLimitBreaches: true,\n    positionSizeWarnings: true,\n    correlationAlerts: false,\n    volatilitySpikes: true,\n    // Performance\n    dailySummary: true,\n    weeklyReport: false,\n    monthlyReport: true,\n    milestoneAchievements: true\n  });\n  const [filterBy, setFilterBy] = useState('all');\n  const [sortBy, setSortBy] = useState('newest');\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [selectedNotification, setSelectedNotification] = useState(null);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [criticalAlertOpen, setCriticalAlertOpen] = useState(false);\n  const [criticalAlert, setCriticalAlert] = useState(null);\n\n  // Notification types and their configurations\n  const notificationTypes = {\n    trade_alert: {\n      name: 'Trade Alert',\n      icon: <TrendingUp />,\n      color: theme.palette.primary.main,\n      priority: 'medium',\n      category: 'trading'\n    },\n    profit_target: {\n      name: 'Profit Target Hit',\n      icon: <CheckCircle />,\n      color: theme.palette.success.main,\n      priority: 'high',\n      category: 'trading'\n    },\n    stop_loss: {\n      name: 'Stop Loss Hit',\n      icon: <Error />,\n      color: theme.palette.error.main,\n      priority: 'high',\n      category: 'trading'\n    },\n    risk_alert: {\n      name: 'Risk Alert',\n      icon: <Warning />,\n      color: theme.palette.warning.main,\n      priority: 'critical',\n      category: 'risk'\n    },\n    market_event: {\n      name: 'Market Event',\n      icon: <Info />,\n      color: theme.palette.info.main,\n      priority: 'medium',\n      category: 'market'\n    },\n    performance: {\n      name: 'Performance Update',\n      icon: <Assessment />,\n      color: theme.palette.secondary.main,\n      priority: 'low',\n      category: 'performance'\n    },\n    system: {\n      name: 'System Alert',\n      icon: <Settings />,\n      color: theme.palette.grey[600],\n      priority: 'low',\n      category: 'system'\n    }\n  };\n\n  // Generate sample notifications\n  useEffect(() => {\n    generateSampleNotifications();\n    simulateRealTimeNotifications();\n  }, []);\n\n  const generateSampleNotifications = () => {\n    const sampleNotifications = [\n      {\n        id: 1,\n        type: 'profit_target',\n        title: 'Profit Target Reached',\n        message: 'NQ long position hit target at 15,485. Profit: +$275',\n        timestamp: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago\n        read: false,\n        priority: 'high',\n        actionable: true,\n        data: { symbol: 'NQ', profit: 275, target: 15485 }\n      },\n      {\n        id: 2,\n        type: 'risk_alert',\n        title: 'Daily Loss Limit Warning',\n        message: 'You have reached 75% of your daily loss limit. Current drawdown: -1.8%',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n        read: false,\n        priority: 'critical',\n        actionable: true,\n        data: { drawdown: 1.8, limit: 2.0 }\n      },\n      {\n        id: 3,\n        type: 'market_event',\n        title: 'Federal Reserve Decision',\n        message: 'FOMC meeting starts in 30 minutes. Consider reducing position sizes.',\n        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\n        read: true,\n        priority: 'medium',\n        actionable: false,\n        data: { event: 'FOMC', impact: 'high' }\n      },\n      {\n        id: 4,\n        type: 'trade_alert',\n        title: 'Setup Alert: FVG Fill',\n        message: 'Fair Value Gap identified on ES 5m chart. Entry opportunity detected.',\n        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 hours ago\n        read: true,\n        priority: 'medium',\n        actionable: true,\n        data: { symbol: 'ES', setup: 'FVG', timeframe: '5m' }\n      },\n      {\n        id: 5,\n        type: 'performance',\n        title: 'Daily Performance Summary',\n        message: 'Today: +$425 (5 trades, 80% win rate). Great job maintaining discipline!',\n        timestamp: new Date(Date.now() - 8 * 60 * 60 * 1000), // 8 hours ago\n        read: true,\n        priority: 'low',\n        actionable: false,\n        data: { profit: 425, trades: 5, winRate: 80 }\n      }\n    ];\n    \n    setNotifications(sampleNotifications);\n    setUnreadCount(sampleNotifications.filter(n => !n.read).length);\n  };\n\n  const simulateRealTimeNotifications = () => {\n    // Simulate receiving new notifications\n    const intervals = [\n      setTimeout(() => addNewNotification({\n        type: 'trade_alert',\n        title: 'Breakout Alert',\n        message: 'NQ breaking above resistance at 15,450. Bullish momentum detected.',\n        data: { symbol: 'NQ', level: 15450, direction: 'bullish' }\n      }), 30000), // 30 seconds\n      \n      setTimeout(() => addNewNotification({\n        type: 'risk_alert',\n        title: 'Position Size Alert',\n        message: 'Current position exceeds 5% of account. Consider reducing size.',\n        data: { positionSize: 5.2, limit: 5.0 }\n      }), 120000), // 2 minutes\n    ];\n    \n    return () => intervals.forEach(clearTimeout);\n  };\n\n  const addNewNotification = (notificationData) => {\n    const newNotification = {\n      id: Date.now(),\n      timestamp: new Date(),\n      read: false,\n      priority: notificationTypes[notificationData.type]?.priority || 'medium',\n      actionable: true,\n      ...notificationData\n    };\n    \n    setNotifications(prev => [newNotification, ...prev]);\n    setUnreadCount(prev => prev + 1);\n    \n    // Handle critical notifications\n    if (newNotification.priority === 'critical') {\n      setCriticalAlert(newNotification);\n      setCriticalAlertOpen(true);\n      \n      // Trigger system notifications if enabled\n      if (notificationSettings.pushNotifications && 'Notification' in window) {\n        new Notification(newNotification.title, {\n          body: newNotification.message,\n          icon: '/favicon.ico',\n          badge: '/favicon.ico'\n        });\n      }\n      \n      // Trigger vibration on mobile\n      if (notificationSettings.vibration && 'vibrate' in navigator) {\n        navigator.vibrate([200, 100, 200]);\n      }\n    }\n    \n    // Show snackbar for important notifications\n    if (newNotification.priority === 'high' || newNotification.priority === 'critical') {\n      enqueueSnackbar(\n        newNotification.title,\n        { \n          variant: newNotification.priority === 'critical' ? 'error' : 'warning',\n          persist: newNotification.priority === 'critical'\n        }\n      );\n    }\n  };\n\n  const markAsRead = (notificationId) => {\n    setNotifications(prev => prev.map(n => \n      n.id === notificationId ? { ...n, read: true } : n\n    ));\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  };\n\n  const markAsUnread = (notificationId) => {\n    setNotifications(prev => prev.map(n => \n      n.id === notificationId ? { ...n, read: false } : n\n    ));\n    setUnreadCount(prev => prev + 1);\n  };\n\n  const deleteNotification = (notificationId) => {\n    const notification = notifications.find(n => n.id === notificationId);\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n    if (notification && !notification.read) {\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    }\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n    setUnreadCount(0);\n  };\n\n  const handleNotificationAction = (notification, action) => {\n    switch (action) {\n      case 'view_trade':\n        onNotificationAction?.({ type: 'navigate', to: '/trades', data: notification.data });\n        break;\n      case 'view_chart':\n        onNotificationAction?.({ type: 'navigate', to: '/analytics', data: notification.data });\n        break;\n      case 'adjust_risk':\n        onNotificationAction?.({ type: 'navigate', to: '/settings', data: notification.data });\n        break;\n      default:\n        break;\n    }\n    markAsRead(notification.id);\n  };\n\n  const getFilteredNotifications = () => {\n    let filtered = notifications;\n    \n    // Apply filters\n    if (filterBy !== 'all') {\n      if (filterBy === 'unread') {\n        filtered = filtered.filter(n => !n.read);\n      } else {\n        filtered = filtered.filter(n => notificationTypes[n.type]?.category === filterBy);\n      }\n    }\n    \n    // Apply sorting\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'newest':\n          return b.timestamp - a.timestamp;\n        case 'oldest':\n          return a.timestamp - b.timestamp;\n        case 'priority':\n          const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n          return priorityOrder[b.priority] - priorityOrder[a.priority];\n        default:\n          return 0;\n      }\n    });\n    \n    return filtered;\n  };\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'critical': return theme.palette.error.main;\n      case 'high': return theme.palette.warning.main;\n      case 'medium': return theme.palette.info.main;\n      case 'low': return theme.palette.grey[500];\n      default: return theme.palette.grey[500];\n    }\n  };\n\n  const renderNotificationItem = (notification) => {\n    const config = notificationTypes[notification.type] || notificationTypes.system;\n    \n    return (\n      <motion.div\n        key={notification.id}\n        initial={{ opacity: 0, x: -20 }}\n        animate={{ opacity: 1, x: 0 }}\n        exit={{ opacity: 0, x: 20 }}\n        layout\n      >\n        <ListItem\n          sx={{\n            borderLeft: `4px solid ${getPriorityColor(notification.priority)}`,\n            backgroundColor: !notification.read ? alpha(config.color, 0.05) : 'transparent',\n            mb: 1,\n            borderRadius: 1,\n            '&:hover': {\n              backgroundColor: alpha(config.color, 0.08)\n            }\n          }}\n          onClick={() => !notification.read && markAsRead(notification.id)}\n        >\n          <ListItemAvatar>\n            <Avatar\n              sx={{\n                bgcolor: config.color,\n                width: 40,\n                height: 40\n              }}\n            >\n              {config.icon}\n            </Avatar>\n          </ListItemAvatar>\n          \n          <ListItemText\n            primary={\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Typography\n                  variant=\"subtitle2\"\n                  sx={{\n                    fontWeight: !notification.read ? 'bold' : 'normal',\n                    flex: 1\n                  }}\n                >\n                  {notification.title}\n                </Typography>\n                \n                <Chip\n                  label={notification.priority}\n                  size=\"small\"\n                  sx={{\n                    bgcolor: alpha(getPriorityColor(notification.priority), 0.1),\n                    color: getPriorityColor(notification.priority),\n                    fontSize: '0.7rem',\n                    height: 20\n                  }}\n                />\n              </Box>\n            }\n            secondary={\n              <Box>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  sx={{ mb: 1 }}\n                >\n                  {notification.message}\n                </Typography>\n                \n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {formatDistanceToNow(notification.timestamp, { addSuffix: true })}\n                  </Typography>\n                  \n                  {notification.actionable && (\n                    <Box sx={{ display: 'flex', gap: 0.5 }}>\n                      {notification.type === 'trade_alert' && (\n                        <Button\n                          size=\"small\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleNotificationAction(notification, 'view_chart');\n                          }}\n                        >\n                          View Chart\n                        </Button>\n                      )}\n                      \n                      {notification.type === 'risk_alert' && (\n                        <Button\n                          size=\"small\"\n                          color=\"warning\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleNotificationAction(notification, 'adjust_risk');\n                          }}\n                        >\n                          Adjust Settings\n                        </Button>\n                      )}\n                      \n                      {(notification.type === 'profit_target' || notification.type === 'stop_loss') && (\n                        <Button\n                          size=\"small\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleNotificationAction(notification, 'view_trade');\n                          }}\n                        >\n                          View Trade\n                        </Button>\n                      )}\n                    </Box>\n                  )}\n                </Box>\n              </Box>\n            }\n          />\n          \n          <ListItemSecondaryAction>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n              <IconButton\n                size=\"small\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  notification.read ? markAsUnread(notification.id) : markAsRead(notification.id);\n                }}\n              >\n                {notification.read ? <MarkAsUnread /> : <MarkEmailRead />}\n              </IconButton>\n              \n              <IconButton\n                size=\"small\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  deleteNotification(notification.id);\n                }}\n              >\n                <Delete />\n              </IconButton>\n            </Box>\n          </ListItemSecondaryAction>\n        </ListItem>\n      </motion.div>\n    );\n  };\n\n  return (\n    <Box>\n      {/* Header */}\n      <Paper sx={{ p: 2, mb: 2 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n            <Badge badgeContent={unreadCount} color=\"error\">\n              <NotificationsActive color=\"primary\" />\n            </Badge>\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n              Notifications\n            </Typography>\n          </Box>\n          \n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <IconButton size=\"small\" onClick={() => setSettingsOpen(true)}>\n              <Settings />\n            </IconButton>\n            \n            <Button\n              size=\"small\"\n              onClick={markAllAsRead}\n              disabled={unreadCount === 0}\n            >\n              Mark All Read\n            </Button>\n          </Box>\n        </Box>\n        \n        {/* Filters and Sorting */}\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item xs={6} sm={4}>\n            <FormControl fullWidth size=\"small\">\n              <InputLabel>Filter</InputLabel>\n              <Select\n                value={filterBy}\n                label=\"Filter\"\n                onChange={(e) => setFilterBy(e.target.value)}\n              >\n                <MenuItem value=\"all\">All</MenuItem>\n                <MenuItem value=\"unread\">Unread</MenuItem>\n                <MenuItem value=\"trading\">Trading</MenuItem>\n                <MenuItem value=\"risk\">Risk</MenuItem>\n                <MenuItem value=\"market\">Market</MenuItem>\n                <MenuItem value=\"performance\">Performance</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item xs={6} sm={4}>\n            <FormControl fullWidth size=\"small\">\n              <InputLabel>Sort by</InputLabel>\n              <Select\n                value={sortBy}\n                label=\"Sort by\"\n                onChange={(e) => setSortBy(e.target.value)}\n              >\n                <MenuItem value=\"newest\">Newest First</MenuItem>\n                <MenuItem value=\"oldest\">Oldest First</MenuItem>\n                <MenuItem value=\"priority\">Priority</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Notifications List */}\n      <Card>\n        <CardContent sx={{ p: 1 }}>\n          {getFilteredNotifications().length === 0 ? (\n            <Box sx={{ textAlign: 'center', py: 4 }}>\n              <NotificationsOff sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n              <Typography variant=\"h6\" color=\"text.secondary\">\n                No notifications\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                You're all caught up!\n              </Typography>\n            </Box>\n          ) : (\n            <List sx={{ p: 0 }}>\n              <AnimatePresence>\n                {getFilteredNotifications().map(renderNotificationItem)}\n              </AnimatePresence>\n            </List>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Critical Alert Dialog */}\n      <Dialog\n        open={criticalAlertOpen}\n        onClose={() => setCriticalAlertOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n        PaperProps={{\n          sx: {\n            background: `linear-gradient(135deg, ${alpha(theme.palette.error.main, 0.1)}, ${alpha(theme.palette.background.paper, 0.95)})`,\n            border: `2px solid ${theme.palette.error.main}`\n          }\n        }}\n      >\n        {criticalAlert && (\n          <>\n            <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              <Emergency color=\"error\" />\n              <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n                Critical Alert\n              </Typography>\n            </DialogTitle>\n            \n            <DialogContent>\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\n                <AlertTitle>{criticalAlert.title}</AlertTitle>\n                {criticalAlert.message}\n              </Alert>\n              \n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Immediate attention required. Please review and take appropriate action.\n              </Typography>\n            </DialogContent>\n            \n            <DialogActions>\n              <Button onClick={() => setCriticalAlertOpen(false)}>Dismiss</Button>\n              <Button\n                variant=\"contained\"\n                color=\"error\"\n                onClick={() => {\n                  handleNotificationAction(criticalAlert, 'adjust_risk');\n                  setCriticalAlertOpen(false);\n                }}\n              >\n                Take Action\n              </Button>\n            </DialogActions>\n          </>\n        )}\n      </Dialog>\n\n      {/* Settings Dialog */}\n      <Dialog\n        open={settingsOpen}\n        onClose={() => setSettingsOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>Notification Settings</DialogTitle>\n        <DialogContent>\n          <FormGroup sx={{ mt: 1 }}>\n            <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n              General Settings\n            </Typography>\n            \n            <FormControlLabel\n              control={\n                <Switch\n                  checked={notificationSettings.enabled}\n                  onChange={(e) => setNotificationSettings(prev => ({ ...prev, enabled: e.target.checked }))}\n                />\n              }\n              label=\"Enable Notifications\"\n            />\n            \n            <FormControlLabel\n              control={\n                <Switch\n                  checked={notificationSettings.sound}\n                  onChange={(e) => setNotificationSettings(prev => ({ ...prev, sound: e.target.checked }))}\n                />\n              }\n              label=\"Sound Alerts\"\n            />\n            \n            <FormControlLabel\n              control={\n                <Switch\n                  checked={notificationSettings.vibration}\n                  onChange={(e) => setNotificationSettings(prev => ({ ...prev, vibration: e.target.checked }))}\n                />\n              }\n              label=\"Vibration (Mobile)\"\n            />\n            \n            <Divider sx={{ my: 2 }} />\n            \n            <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n              Trading Alerts\n            </Typography>\n            \n            {Object.entries(notificationSettings).filter(([key]) => \n              ['priceAlerts', 'profitTargets', 'stopLossHits', 'marketOpen', 'economicEvents'].includes(key)\n            ).map(([key, value]) => (\n              <FormControlLabel\n                key={key}\n                control={\n                  <Switch\n                    checked={value}\n                    onChange={(e) => setNotificationSettings(prev => ({ ...prev, [key]: e.target.checked }))}\n                  />\n                }\n                label={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n              />\n            ))}\n            \n            <Divider sx={{ my: 2 }} />\n            \n            <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n              Risk Management\n            </Typography>\n            \n            {Object.entries(notificationSettings).filter(([key]) => \n              ['riskLimitBreaches', 'positionSizeWarnings', 'volatilitySpikes'].includes(key)\n            ).map(([key, value]) => (\n              <FormControlLabel\n                key={key}\n                control={\n                  <Switch\n                    checked={value}\n                    onChange={(e) => setNotificationSettings(prev => ({ ...prev, [key]: e.target.checked }))}\n                  />\n                }\n                label={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n              />\n            ))}\n          </FormGroup>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={() => setSettingsOpen(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={() => setSettingsOpen(false)}>\n            Save Settings\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default MobileNotificationSystem;