import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Grid,\n  Chip,\n  LinearProgress,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Alert,\n  AlertTitle,\n  Tooltip,\n  IconButton,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  CircularProgress,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  TrendingFlat,\n  Timeline,\n  Assessment,\n  Warning,\n  CheckCircle,\n  Info,\n  Refresh,\n  ExpandMore,\n  ZoomIn,\n  Speed,\n  Whatshot,\n  Waves,\n  ShowChart,\n  BarChart,\n  Analytics,\n  Insights,\n  MonetizationOn,\n  Shield,\n  Psychology\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  ComposedChart,\n  Bar\n} from 'recharts';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { format, subDays } from 'date-fns';\nimport { useSnackbar } from '../../contexts/SnackbarContext';\n\nconst MarketRegimeDetector = ({ marketData, onRegimeChange }) => {\n  const theme = useTheme();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // State management\n  const [currentRegime, setCurrentRegime] = useState(null);\n  const [regimeHistory, setRegimeHistory] = useState([]);\n  const [regimeMetrics, setRegimeMetrics] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);\n  const [selectedRegimePeriod, setSelectedRegimePeriod] = useState(null);\n  const [tradingRecommendations, setTradingRecommendations] = useState([]);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n\n  // Market regime definitions\n  const regimeTypes = {\n    trending_bullish: {\n      name: 'Trending Bullish',\n      color: theme.palette.success.main,\n      icon: <TrendingUp />,\n      description: 'Strong upward momentum with consistent higher highs and higher lows',\n      characteristics: ['Strong momentum', 'Clear direction', 'Breakout patterns'],\n      strategies: ['Trend following', 'Momentum trades', 'Breakout setups'],\n      riskLevel: 'Medium'\n    },\n    trending_bearish: {\n      name: 'Trending Bearish',\n      color: theme.palette.error.main,\n      icon: <TrendingDown />,\n      description: 'Strong downward momentum with consistent lower highs and lower lows',\n      characteristics: ['Strong selling pressure', 'Clear direction', 'Breakdown patterns'],\n      strategies: ['Short selling', 'Put options', 'Breakdown setups'],\n      riskLevel: 'Medium'\n    },\n    ranging: {\n      name: 'Ranging/Sideways',\n      color: theme.palette.warning.main,\n      icon: <TrendingFlat />,\n      description: 'Price consolidation within defined support and resistance levels',\n      characteristics: ['Bounded movement', 'Support/resistance', 'Mean reversion'],\n      strategies: ['Range trading', 'Mean reversion', 'Support/resistance bounces'],\n      riskLevel: 'Low'\n    },\n    volatile: {\n      name: 'High Volatility',\n      color: theme.palette.error.main,\n      icon: <Whatshot />,\n      description: 'Erratic price movements with high uncertainty and rapid changes',\n      characteristics: ['High volatility', 'Unpredictable moves', 'News-driven'],\n      strategies: ['Reduced position size', 'Wider stops', 'Volatility plays'],\n      riskLevel: 'High'\n    },\n    accumulation: {\n      name: 'Accumulation',\n      color: theme.palette.info.main,\n      icon: <Waves />,\n      description: 'Institutional accumulation phase with gradual price improvement',\n      characteristics: ['Volume accumulation', 'Smart money activity', 'Base building'],\n      strategies: ['Position building', 'Dollar cost averaging', 'Long-term holds'],\n      riskLevel: 'Low'\n    },\n    distribution: {\n      name: 'Distribution',\n      color: theme.palette.warning.main,\n      icon: <BarChart />,\n      description: 'Institutional distribution phase with potential trend reversal',\n      characteristics: ['High volume selling', 'Topping patterns', 'Weakness signs'],\n      strategies: ['Profit taking', 'Short preparation', 'Risk reduction'],\n      riskLevel: 'High'\n    }\n  };\n\n  // Generate mock market regime data\n  useEffect(() => {\n    generateRegimeData();\n  }, [marketData]);\n\n  const generateRegimeData = () => {\n    setLoading(true);\n    \n    // Simulate market regime detection\n    setTimeout(() => {\n      const regimes = Object.keys(regimeTypes);\n      const currentRegimeType = regimes[Math.floor(Math.random() * regimes.length)];\n      \n      const regime = {\n        type: currentRegimeType,\n        confidence: 0.7 + Math.random() * 0.25, // 70-95% confidence\n        duration: Math.floor(Math.random() * 14) + 1, // 1-14 days\n        strength: Math.random(),\n        volatility: Math.random(),\n        volume_profile: Math.random(),\n        momentum: Math.random() * 2 - 1, // -1 to 1\n        timestamp: new Date()\n      };\n      \n      setCurrentRegime(regime);\n      \n      // Generate regime history\n      const history = Array.from({ length: 30 }, (_, i) => {\n        const date = subDays(new Date(), 29 - i);\n        const regimeType = regimes[Math.floor(Math.random() * regimes.length)];\n        return {\n          date: format(date, 'MMM dd'),\n          regime: regimeType,\n          confidence: 0.6 + Math.random() * 0.3,\n          performance: (Math.random() - 0.5) * 10 // -5% to +5%\n        };\n      });\n      \n      setRegimeHistory(history);\n      \n      // Generate regime performance metrics\n      const metrics = {\n        trending_bullish: { win_rate: 0.75, avg_return: 2.3, trades: 45, sharpe: 1.8 },\n        trending_bearish: { win_rate: 0.68, avg_return: 1.9, trades: 32, sharpe: 1.5 },\n        ranging: { win_rate: 0.82, avg_return: 0.8, trades: 78, sharpe: 2.1 },\n        volatile: { win_rate: 0.45, avg_return: 3.2, trades: 23, sharpe: 0.9 },\n        accumulation: { win_rate: 0.71, avg_return: 1.4, trades: 28, sharpe: 1.6 },\n        distribution: { win_rate: 0.53, avg_return: 2.1, trades: 19, sharpe: 1.1 }\n      };\n      \n      setRegimeMetrics(metrics);\n      \n      // Generate trading recommendations\n      generateRecommendations(regime);\n      \n      setLastUpdated(new Date());\n      setLoading(false);\n      \n      // Notify parent component of regime change\n      onRegimeChange?.(regime);\n    }, 1500);\n  };\n\n  const generateRecommendations = (regime) => {\n    const regimeConfig = regimeTypes[regime.type];\n    \n    const recommendations = [\n      {\n        type: 'strategy',\n        priority: 'high',\n        title: `Optimal for ${regimeConfig.strategies[0]}`,\n        description: `Current ${regimeConfig.name.toLowerCase()} conditions favor ${regimeConfig.strategies[0].toLowerCase()} approaches.`,\n        confidence: regime.confidence\n      },\n      {\n        type: 'risk',\n        priority: regimeConfig.riskLevel === 'High' ? 'high' : 'medium',\n        title: `${regimeConfig.riskLevel} Risk Environment`,\n        description: `Consider ${regimeConfig.riskLevel === 'High' ? 'reducing position sizes and using wider stops' : 'standard risk management techniques'}.`,\n        confidence: regime.confidence\n      },\n      {\n        type: 'timing',\n        priority: 'medium',\n        title: 'Market Timing Insight',\n        description: `Regime has been active for ${regime.duration} days. ${regime.duration > 10 ? 'Consider potential regime change.' : 'Regime likely to continue.'}`,\n        confidence: regime.confidence\n      }\n    ];\n    \n    setTradingRecommendations(recommendations);\n  };\n\n  const refreshRegimeData = () => {\n    generateRegimeData();\n    enqueueSnackbar('Market regime data refreshed', { variant: 'info' });\n  };\n\n  const getRegimeColor = (regimeType) => {\n    return regimeTypes[regimeType]?.color || theme.palette.grey[500];\n  };\n\n  const getConfidenceLevel = (confidence) => {\n    if (confidence >= 0.9) return { label: 'Very High', color: 'success' };\n    if (confidence >= 0.8) return { label: 'High', color: 'info' };\n    if (confidence >= 0.7) return { label: 'Medium', color: 'warning' };\n    return { label: 'Low', color: 'error' };\n  };\n\n  const renderCurrentRegimeCard = () => {\n    if (!currentRegime) return null;\n    \n    const regimeConfig = regimeTypes[currentRegime.type];\n    const confidenceLevel = getConfidenceLevel(currentRegime.confidence);\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Card\n          sx={{\n            background: `linear-gradient(135deg, ${alpha(regimeConfig.color, 0.1)}, ${alpha(theme.palette.background.paper, 0.9)})`,\n            border: `2px solid ${alpha(regimeConfig.color, 0.3)}`,\n            position: 'relative',\n            overflow: 'visible'\n          }}\n        >\n          <CardHeader\n            avatar={\n              <Box\n                sx={{\n                  width: 56,\n                  height: 56,\n                  borderRadius: '50%',\n                  bgcolor: regimeConfig.color,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  color: 'white',\n                  fontSize: '1.5rem'\n                }}\n              >\n                {regimeConfig.icon}\n              </Box>\n            }\n            title={\n              <Typography variant=\"h5\" sx={{ fontWeight: 'bold' }}>\n                {regimeConfig.name}\n              </Typography>\n            }\n            subheader={\n              <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>\n                <Chip\n                  label={`${(currentRegime.confidence * 100).toFixed(0)}% Confidence`}\n                  color={confidenceLevel.color}\n                  size=\"small\"\n                  sx={{ fontWeight: 'bold' }}\n                />\n                <Chip\n                  label={`${currentRegime.duration} days`}\n                  color=\"default\"\n                  size=\"small\"\n                />\n              </Box>\n            }\n            action={\n              <IconButton onClick={refreshRegimeData} disabled={loading}>\n                <Refresh />\n              </IconButton>\n            }\n          />\n          \n          <CardContent>\n            <Typography variant=\"body1\" sx={{ mb: 3, lineHeight: 1.6 }}>\n              {regimeConfig.description}\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                  Key Characteristics\n                </Typography>\n                <List dense>\n                  {regimeConfig.characteristics.map((char, index) => (\n                    <ListItem key={index} sx={{ py: 0.5 }}>\n                      <ListItemIcon sx={{ minWidth: 24 }}>\n                        <CheckCircle color=\"success\" fontSize=\"small\" />\n                      </ListItemIcon>\n                      <ListItemText primary={char} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                  Recommended Strategies\n                </Typography>\n                <List dense>\n                  {regimeConfig.strategies.map((strategy, index) => (\n                    <ListItem key={index} sx={{ py: 0.5 }}>\n                      <ListItemIcon sx={{ minWidth: 24 }}>\n                        <TrendingUp color=\"primary\" fontSize=\"small\" />\n                      </ListItemIcon>\n                      <ListItemText primary={strategy} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Grid>\n            </Grid>\n            \n            {/* Regime Metrics */}\n            <Box sx={{ mt: 3 }}>\n              <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 2 }}>\n                Current Regime Indicators\n              </Typography>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={6} sm={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <CircularProgress\n                      variant=\"determinate\"\n                      value={currentRegime.strength * 100}\n                      size={60}\n                      thickness={6}\n                      sx={{ mb: 1 }}\n                    />\n                    <Typography variant=\"caption\" display=\"block\">\n                      Strength\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n                      {(currentRegime.strength * 100).toFixed(0)}%\n                    </Typography>\n                  </Box>\n                </Grid>\n                \n                <Grid item xs={6} sm={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <CircularProgress\n                      variant=\"determinate\"\n                      value={currentRegime.volatility * 100}\n                      size={60}\n                      thickness={6}\n                      color=\"warning\"\n                      sx={{ mb: 1 }}\n                    />\n                    <Typography variant=\"caption\" display=\"block\">\n                      Volatility\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n                      {(currentRegime.volatility * 100).toFixed(0)}%\n                    </Typography>\n                  </Box>\n                </Grid>\n                \n                <Grid item xs={6} sm={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <CircularProgress\n                      variant=\"determinate\"\n                      value={currentRegime.volume_profile * 100}\n                      size={60}\n                      thickness={6}\n                      color=\"info\"\n                      sx={{ mb: 1 }}\n                    />\n                    <Typography variant=\"caption\" display=\"block\">\n                      Volume\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n                      {(currentRegime.volume_profile * 100).toFixed(0)}%\n                    </Typography>\n                  </Box>\n                </Grid>\n                \n                <Grid item xs={6} sm={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 1 }}>\n                      {currentRegime.momentum > 0.2 ? (\n                        <TrendingUp color=\"success\" sx={{ fontSize: 40 }} />\n                      ) : currentRegime.momentum < -0.2 ? (\n                        <TrendingDown color=\"error\" sx={{ fontSize: 40 }} />\n                      ) : (\n                        <TrendingFlat color=\"warning\" sx={{ fontSize: 40 }} />\n                      )}\n                    </Box>\n                    <Typography variant=\"caption\" display=\"block\">\n                      Momentum\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n                      {currentRegime.momentum > 0 ? '+' : ''}{(currentRegime.momentum * 100).toFixed(0)}%\n                    </Typography>\n                  </Box>\n                </Grid>\n              </Grid>\n            </Box>\n          </CardContent>\n        </Card>\n      </motion.div>\n    );\n  };\n\n  const renderRegimeHistory = () => (\n    <Card sx={{ mt: 3 }}>\n      <CardHeader\n        title=\"Regime History (30 Days)\"\n        avatar={<Timeline color=\"primary\" />}\n        action={\n          <Button\n            size=\"small\"\n            onClick={() => setDetailsDialogOpen(true)}\n            endIcon={<ZoomIn />}\n          >\n            View Details\n          </Button>\n        }\n      />\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <ComposedChart data={regimeHistory}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis yAxisId=\"left\" domain={[-6, 6]} />\n            <YAxis yAxisId=\"right\" orientation=\"right\" domain={[0, 1]} />\n            <RechartsTooltip \n              formatter={(value, name) => {\n                if (name === 'performance') return [`${value.toFixed(1)}%`, 'Performance'];\n                if (name === 'confidence') return [`${(value * 100).toFixed(0)}%`, 'Confidence'];\n                return [value, name];\n              }}\n            />\n            <Legend />\n            <Bar\n              yAxisId=\"left\"\n              dataKey=\"performance\"\n              fill={theme.palette.primary.main}\n              name=\"Daily Performance (%)\"\n            />\n            <Line\n              yAxisId=\"right\"\n              type=\"monotone\"\n              dataKey=\"confidence\"\n              stroke={theme.palette.secondary.main}\n              strokeWidth={2}\n              name=\"Confidence Level\"\n            />\n          </ComposedChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n\n  const renderTradingRecommendations = () => (\n    <Card sx={{ mt: 3 }}>\n      <CardHeader\n        title=\"AI Trading Recommendations\"\n        avatar={<Insights color=\"primary\" />}\n      />\n      <CardContent>\n        {tradingRecommendations.map((rec, index) => {\n          const getPriorityColor = (priority) => {\n            switch (priority) {\n              case 'high': return 'error';\n              case 'medium': return 'warning';\n              default: return 'info';\n            }\n          };\n          \n          const getPriorityIcon = (type) => {\n            switch (type) {\n              case 'strategy': return <Psychology />;\n              case 'risk': return <Shield />;\n              case 'timing': return <Speed />;\n              default: return <Info />;\n            }\n          };\n          \n          return (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: index * 0.1 }}\n            >\n              <Alert\n                severity={getPriorityColor(rec.priority)}\n                icon={getPriorityIcon(rec.type)}\n                sx={{ mb: 2 }}\n              >\n                <AlertTitle>{rec.title}</AlertTitle>\n                {rec.description}\n                <Box sx={{ mt: 1 }}>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={rec.confidence * 100}\n                    sx={{ height: 4, borderRadius: 2 }}\n                  />\n                  <Typography variant=\"caption\" sx={{ mt: 0.5, display: 'block' }}>\n                    Confidence: {(rec.confidence * 100).toFixed(0)}%\n                  </Typography>\n                </Box>\n              </Alert>\n            </motion.div>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n\n  const renderPerformanceMetrics = () => {\n    if (!regimeMetrics) return null;\n    \n    return (\n      <Card sx={{ mt: 3 }}>\n        <CardHeader\n          title=\"Historical Performance by Regime\"\n          avatar={<Assessment color=\"primary\" />}\n        />\n        <CardContent>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Regime Type</TableCell>\n                  <TableCell align=\"right\">Win Rate</TableCell>\n                  <TableCell align=\"right\">Avg Return</TableCell>\n                  <TableCell align=\"right\">Trades</TableCell>\n                  <TableCell align=\"right\">Sharpe Ratio</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {Object.entries(regimeMetrics).map(([regimeType, metrics]) => {\n                  const regimeConfig = regimeTypes[regimeType];\n                  return (\n                    <TableRow key={regimeType}>\n                      <TableCell>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          <Box\n                            sx={{\n                              width: 16,\n                              height: 16,\n                              borderRadius: '50%',\n                              bgcolor: regimeConfig.color\n                            }}\n                          />\n                          {regimeConfig.name}\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Chip\n                          label={`${(metrics.win_rate * 100).toFixed(0)}%`}\n                          color={metrics.win_rate > 0.7 ? 'success' : metrics.win_rate > 0.5 ? 'warning' : 'error'}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Typography\n                          sx={{\n                            color: metrics.avg_return > 0 ? theme.palette.success.main : theme.palette.error.main,\n                            fontWeight: 'bold'\n                          }}\n                        >\n                          {metrics.avg_return > 0 ? '+' : ''}{metrics.avg_return.toFixed(1)}%\n                        </Typography>\n                      </TableCell>\n                      <TableCell align=\"right\">{metrics.trades}</TableCell>\n                      <TableCell align=\"right\">\n                        <Typography sx={{ fontWeight: 'bold' }}>\n                          {metrics.sharpe.toFixed(2)}\n                        </Typography>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent sx={{ textAlign: 'center', py: 6 }}>\n          <CircularProgress size={60} sx={{ mb: 2 }} />\n          <Typography variant=\"h6\">Analyzing Market Regime...</Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Processing market data and detecting current conditions\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Paper sx={{ p: 2, mb: 3, background: `linear-gradient(135deg, ${alpha(theme.palette.info.main, 0.1)}, ${alpha(theme.palette.background.paper, 0.9)})` }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Box>\n            <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mb: 0.5 }}>\n              Market Regime Analysis\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              AI-powered market condition detection and trading recommendations\n            </Typography>\n          </Box>\n          <Chip\n            label={`Updated ${format(lastUpdated, 'HH:mm')}`}\n            color=\"info\"\n            size=\"small\"\n          />\n        </Box>\n      </Paper>\n\n      {/* Current Regime */}\n      {renderCurrentRegimeCard()}\n      \n      {/* Trading Recommendations */}\n      {renderTradingRecommendations()}\n      \n      {/* Regime History Chart */}\n      {renderRegimeHistory()}\n      \n      {/* Performance Metrics */}\n      {renderPerformanceMetrics()}\n\n      {/* Details Dialog */}\n      <Dialog\n        open={detailsDialogOpen}\n        onClose={() => setDetailsDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Detailed Regime Analysis</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\">\n            Detailed market regime analysis would include advanced metrics,\n            correlation analysis, and predictive modeling results.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDetailsDialogOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default MarketRegimeDetector;