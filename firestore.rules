rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for authentication and data validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && request.auth.uid != null;
    }
    
    // Validate trade data structure
    function isValidTrade(data) {
      return data.keys().hasAll(['symbol', 'entry_time', 'outcome', 'user_id']) &&
             data.symbol is string &&
             data.symbol.size() > 0 &&
             data.symbol.size() <= 20 &&
             data.outcome in ['Win', 'Loss', 'Breakeven'] &&
             data.user_id == request.auth.uid &&
             (data.profit_loss is number || data.profit_loss == null) &&
             (data.setup_type is string || data.setup_type == null) &&
             (data.position_size is number || data.position_size == null);
    }
    
    // Validate plan data structure
    function isValidPlan(data) {
      return data.keys().hasAll(['date', 'user_id']) &&
             data.date is timestamp &&
             data.user_id == request.auth.uid &&
             (data.market_bias is string || data.market_bias == null) &&
             (data.goals is string || data.goals == null) &&
             (data.key_levels is string || data.key_levels == null);
    }
    
    // Validate journal entry data structure
    function isValidJournalEntry(data) {
      return data.keys().hasAll(['date', 'user_id']) &&
             data.date is timestamp &&
             data.user_id == request.auth.uid &&
             (data.content is string || data.content == null) &&
             (data.mood_rating is number || data.mood_rating == null) &&
             (data.tags is list || data.tags == null);
    }
    
    // User profiles - users can only access their own profile
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId) && 
                       resource == null; // Prevent overwriting existing users
    }
    
    // Trades collection - strict user isolation
    match /trades/{tradeId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.user_id == request.auth.uid;
      allow create: if isAuthenticated() && 
                      isValidTrade(request.resource.data);
      allow update: if isAuthenticated() && 
                      resource.data.user_id == request.auth.uid &&
                      isValidTrade(request.resource.data);
      allow delete: if isAuthenticated() && 
                      resource.data.user_id == request.auth.uid;
    }
    
    // Daily plans collection - strict user isolation
    match /plans/{planId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.user_id == request.auth.uid;
      allow create: if isAuthenticated() && 
                      isValidPlan(request.resource.data);
      allow update: if isAuthenticated() && 
                      resource.data.user_id == request.auth.uid &&
                      isValidPlan(request.resource.data);
      allow delete: if isAuthenticated() && 
                      resource.data.user_id == request.auth.uid;
    }
    
    // Journal entries collection - strict user isolation
    match /journal_entries/{journalId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.user_id == request.auth.uid;
      allow create: if isAuthenticated() && 
                      isValidJournalEntry(request.resource.data);
      allow update: if isAuthenticated() && 
                      resource.data.user_id == request.auth.uid &&
                      isValidJournalEntry(request.resource.data);
      allow delete: if isAuthenticated() && 
                      resource.data.user_id == request.auth.uid;
    }
    
    // Alerts collection - user-specific access
    match /alerts/{alertId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.user_id == request.auth.uid;
      allow create: if isAuthenticated() && 
                      request.resource.data.user_id == request.auth.uid;
      allow update: if isAuthenticated() && 
                      resource.data.user_id == request.auth.uid;
      allow delete: if isAuthenticated() && 
                      resource.data.user_id == request.auth.uid;
    }
    
    // User preferences collection
    match /user_preferences/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // TradeSage conversations - user-specific access
    match /tradesage_conversations/{conversationId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.user_id == request.auth.uid;
      allow create: if isAuthenticated() && 
                      request.resource.data.user_id == request.auth.uid;
    }
    
    // Statistics cache - read-only for authenticated users, write for system
    match /statistics_cache/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      // Write access is typically handled by Cloud Functions or admin SDK
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
