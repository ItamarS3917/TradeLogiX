name: 🧪 Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'

jobs:
  # Quick validation job
  validate:
    name: 🔍 Code Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend-new/package-lock.json
          
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          
      - name: Install Node.js dependencies
        run: |
          cd frontend-new
          npm ci
          
      - name: Python code formatting check
        run: |
          black --check backend/
          isort --check-only backend/
          
      - name: Python linting
        run: |
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Python type checking
        run: |
          mypy backend/ --ignore-missing-imports
          
      - name: Frontend linting
        run: |
          cd frontend-new
          npm run lint
          
      - name: Security scan - Python
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          
      - name: Security scan - Node.js
        run: |
          cd frontend-new
          npm audit --audit-level high
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Backend unit tests
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    if: github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'unit'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: trading_journal_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock pytest-cov factory-boy httpx pytest-benchmark
          
      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_journal_test
        run: |
          python backend/db/migrate.py
          
      - name: Run backend unit tests
        env:
          TESTING: 1
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_journal_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          python -m pytest backend/tests/ -v \
            --tb=short \
            --cov=backend \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=backend-test-results.xml
            
      - name: Run MCP server tests
        env:
          TESTING: 1
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_journal_test
        run: |
          python -m pytest backend/mcp/tests/ -v \
            --tb=short \
            --junitxml=mcp-test-results.xml
            
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            backend-test-results.xml
            mcp-test-results.xml
            htmlcov/
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend unit tests
  frontend-tests:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    if: github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'unit'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend-new/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend-new
          npm ci
          npm install --save-dev @testing-library/user-event msw @axe-core/react
          
      - name: Run frontend unit tests
        run: |
          cd frontend-new
          npm run test:run -- --reporter=junit --outputFile=../frontend-test-results.xml
          
      - name: Run frontend tests with coverage
        run: |
          cd frontend-new
          npm run test:coverage
          
      - name: Run accessibility tests
        run: |
          cd frontend-new
          npm run test:a11y || true
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend-test-results.xml
            frontend-new/coverage/
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: frontend-new/coverage
          flags: frontend
          name: frontend-coverage

  # Integration tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [backend-tests, frontend-tests]
    if: github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'integration'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: trading_journal_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend-new/package-lock.json
          
      - name: Install backend dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock httpx
          
      - name: Install frontend dependencies
        run: |
          cd frontend-new
          npm ci
          
      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_journal_test
        run: |
          python backend/db/migrate.py
          
      - name: Start backend server
        env:
          TESTING: 1
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/trading_journal_test
        run: |
          python backend/main.py &
          sleep 10
          
      - name: Start frontend server
        env:
          REACT_APP_API_URL: http://localhost:8000
        run: |
          cd frontend-new
          npm start &
          sleep 15
          
      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/api/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          
      - name: Run integration tests
        env:
          TEST_BASE_URL: http://localhost:3000
          TEST_API_URL: http://localhost:8000
        run: |
          python -m pytest testing/integration/ -v \
            --tb=short \
            --junitxml=integration-test-results.xml
            
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-test-results.xml

  # End-to-end tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: integration-tests
    if: github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'e2e'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend-new/package-lock.json
          
      - name: Install Playwright
        run: |
          cd frontend-new
          npm ci
          npx playwright install --with-deps
          
      - name: Start application with Docker
        run: |
          docker-compose -f docker-compose.test.yml up -d --build
          
      - name: Wait for application
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 5; done'
          timeout 120 bash -c 'until curl -f http://localhost:3001; do sleep 5; done'
          
      - name: Run E2E tests
        env:
          TEST_BASE_URL: http://localhost:3001
          TEST_API_URL: http://localhost:8001
        run: |
          npx playwright test --reporter=html,junit --output-dir=e2e-artifacts
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            e2e-artifacts/
            test-results/
            
      - name: Upload E2E videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-videos
          path: test-results/**/video.webm
          
      - name: Stop application
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Performance tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: integration-tests
    if: github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'performance' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Start application
        run: |
          docker-compose -f docker-compose.test.yml up -d --build test-backend test-db
          
      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8001/api/health; do sleep 5; done'
          
      - name: Run performance tests
        run: |
          docker-compose -f docker-compose.test.yml --profile performance run --rm performance-tester
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: testing/reports/performance-results.json
          
      - name: Stop application
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Security tests
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate
    if: github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'security' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Start application
        run: |
          docker-compose -f docker-compose.test.yml up -d --build test-backend test-frontend
          
      - name: Wait for application
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:8001/api/health; do sleep 5; done'
          timeout 120 bash -c 'until curl -f http://localhost:3001; do sleep 5; done'
          
      - name: Run OWASP ZAP security tests
        run: |
          docker-compose -f docker-compose.test.yml --profile security run --rm security-tester
          
      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            testing/reports/security-*.json
            trivy-results.sarif
            
      - name: Stop application
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Test results aggregation
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts
          
      - name: Generate test summary
        run: |
          python -c "
          import json
          import os
          from pathlib import Path
          
          summary = {
              'workflow_run': '${{ github.run_id }}',
              'commit': '${{ github.sha }}',
              'branch': '${{ github.ref_name }}',
              'triggered_by': '${{ github.event_name }}',
              'test_results': {}
          }
          
          # Process test results
          artifacts_dir = Path('test-artifacts')
          if artifacts_dir.exists():
              for artifact_dir in artifacts_dir.iterdir():
                  if artifact_dir.is_dir():
                      summary['test_results'][artifact_dir.name] = {
                          'status': 'completed',
                          'files': [f.name for f in artifact_dir.iterdir()]
                      }
          
          # Save summary
          with open('test-summary.json', 'w') as f:
              json.dump(summary, f, indent=2)
          "
          
      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.json
          
      - name: Comment test summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summary = JSON.parse(fs.readFileSync('test-summary.json', 'utf8'));
              
              let comment = '## 🧪 Test Summary\n\n';
              comment += `- **Workflow**: #${{ github.run_id }}\n`;
              comment += `- **Commit**: \`${{ github.sha }}\`\n`;
              comment += `- **Branch**: \`${{ github.ref_name }}\`\n\n`;
              
              comment += '### Test Results\n';
              for (const [testType, result] of Object.entries(summary.test_results)) {
                comment += `- **${testType}**: ✅ ${result.status}\n`;
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Error posting comment:', error);
            }

  # Deployment (conditional)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [test-summary, performance-tests, security-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment steps here
          
      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests..."
          # Add smoke tests here
          
      - name: Deploy to production
        if: success()
        run: |
          echo "Deploying to production environment..."
          # Add production deployment steps here
